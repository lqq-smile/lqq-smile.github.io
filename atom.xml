<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李清泉个人博客</title>
  
  <subtitle>李清泉个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lqq-smile.github.io/"/>
  <updated>2018-06-26T15:52:37.001Z</updated>
  <id>https://lqq-smile.github.io/</id>
  
  <author>
    <name>李清泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逻辑回归与决策树在分类上的一些区别</title>
    <link href="https://lqq-smile.github.io/2018/06/26/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E5%86%B3%E7%AD%96%E6%A0%91%E5%9C%A8%E5%88%86%E7%B1%BB%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/"/>
    <id>https://lqq-smile.github.io/2018/06/26/逻辑回归与决策树在分类上的一些区别/</id>
    <published>2018-06-26T15:06:24.000Z</published>
    <updated>2018-06-26T15:52:37.001Z</updated>
    
    <content type="html"><![CDATA[<p>营销预测模型的目标变量很多为一种状态或类型，如客户“买”还是“不买”、客户选择上网方式为 “宽带”还是“拨号”、营销战通道是邮件、电话、还是网络。我们把这类问题统称为 “分类”。决策树和逻辑回归都是解决“分类”问题的高手。用不同的算法解答同样的问题，自然引出了两者孰优孰劣的讨论，但迄今为止，仍然没有一个明确的结论。出现这种情况是意料之中的，因为两者的具体表现取决于数据状况和挖掘人员的水平。从算法本身看，决策树和回归各有优势，因此最好的应用不是两者择一，而是相互取舍，利用一方的长处弥补另一方的不足。</p><p>在进一步讨论之前，让我们来看一下逻辑回归和决策树的主要差别。</p><p>有些分歧是表面的，例如决策树可以对付缺失值，而逻辑回归需要挖掘人员预先对缺失数据进行处理。但实际上决策树同样要对缺失值做出某种假设和处理。例如CART在遇到一个变量中有缺失情况时，是用次级变量进行替换切分。这种做法在逻辑回归中也可以办到，但需要单独的编程。而在决策树中，这一步已经嵌入软件的算法引擎。</p><p>从实质上看，决策树和逻辑回归的分歧是：</p><ol><li>逻辑回归对数据整体结构的分析优于决策树，而决策树对局部结构的分析优于逻辑回归。</li><li>逻辑回归擅长分析线性关系，而决策树对线性关系的把握较差。虽然对付非线性关系是决策树的强项，但是很多非线性关系完全可以用线性关系作为近似，而且效果很好。线性关系在实践中有很多优点：简洁，易理解，可以在一定程度上防止对数据的过度拟合。</li><li>逻辑回归对极值比较敏感，容易受极端值的影响，而决策树在这方面表现较好。</li></ol><p>两者的差别主要来自算法逻辑。决策树由于采用分割的方法，所以能够深入数据细部，但同时失去了对全局的把握。一个分层一旦形成，它和别的层面或节点的关系就被切断了，以后的挖掘只能在局部中进行。同时由于切分，样本数量不断萎缩，所以无法支持对多变量的同时检验。而逻辑回归，始终着眼整个数据的拟合，所以对全局把握较好。但无法兼顾局部数据，或者说缺乏探查局部结构的内在机制。</p><p>除外，逻辑回归和决策树还有一些应用上的区别。决策树的结果和逻辑回归相比略显粗糙。逻辑回归原则上可以提供数据中每个观察点的概率，而决策树只能把挖掘对象分为有限的概率组群。比如决策树确定17个节点，全部人口就只能有17个概率，在应用上受到一定限制。就操作来说，决策树比较容易上手，需要的数据预处理较少，而逻辑回归则要求一定的训练和技巧。</p><p>对于两者间互补或增强，主要思路是利用决策树对局部数据结构优越的把握能力增加逻辑回归的效力。在具体做法上有几种，一种是从决策树分析中找出数据局部结构，作为在逻辑回归中构建依变量（interaction)的依据。另一种是在需要对预测因子进行离散化处理时，利用决策树分析决定最佳切分点。还有一种是把决策树分类的最终结果作为预测变量，和其他协变量一起代入回归模型，又称为“嫁接式模型”。从理论上讲，嫁接模型综合了决策树和逻辑回归的优点。最终节点包含了数据中重要的局部结构，而协变量可以拾补被决策树遗漏的数据整体结构。</p><p>嫁接模型是一个很巧妙的设计，但是在实践中并没有得到普遍的认同。由于决策树已经对数据进行了最大限度的拟合，所以留给协变量的余地很小。换句话说，把决策树的最终节点作为预测因子，就可能找不出还有独立作用的协变量。而没有协变量，逻辑回归实际只是决策树的重复。再有，由于节点是多个属性的综合，不易解释。每个节点到底代表什么不明确，由此限制了这种方法的推广。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;营销预测模型的目标变量很多为一种状态或类型，如客户“买”还是“不买”、客户选择上网方式为 “宽带”还是“拨号”、营销战通道是邮件、电话、还是网络。我们把这类问题统称为 “分类”。决策树和逻辑回归都是解决“分类”问题的高手。用不同的算法解答同样的问题，自然引出了两者孰优孰劣的
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="逻辑回归" scheme="https://lqq-smile.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
      <category term="决策树" scheme="https://lqq-smile.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>如何选择机器学习算法</title>
    <link href="https://lqq-smile.github.io/2018/06/25/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/"/>
    <id>https://lqq-smile.github.io/2018/06/25/如何选择机器学习算法/</id>
    <published>2018-06-25T13:40:49.000Z</published>
    <updated>2018-06-25T13:50:06.823Z</updated>
    
    <content type="html"><![CDATA[<p>一个典型的问题是“我应该使用哪种算法？”</p><p>问题的答案取决于许多因素，其中包括：</p><p>数据的大小，质量和性质。</p><p>可用的计算时间。</p><p>任务的紧迫性。</p><p>你想要对数据做什么。</p><p>机器学习算法备忘单</p><p><img src="http://pava02hb7.bkt.clouddn.com/1.jpeg" alt=""></p><p>机器学习算法映射</p><p><img src="http://pava02hb7.bkt.clouddn.com/2.jpeg" alt=""></p><p>谁将很快占领人工智能的世界!!</p><p><img src="http://pava02hb7.bkt.clouddn.com/3.jpeg" alt=""></p><p>机器学习算法的类型</p><p>监督学习</p><p>监督学习算法基于一组示例进行预测。例如，历史销售额可用于估算未来价格。通过监督学习，您可以获得一个输入变量，该输入变量由标记的训练数据和一个期望的输出变量组成 您使用算法分析训练数据以了解将输入映射到输出的函数。这个推断的功能通过从训练数据中推广来预测未见情况下的结果，映射新的未知示例。</p><p>分类：当数据被用于预测分类变量时，监督学习也被称为分类。将标签或指示器（狗或猫）分配给图像时就是这种情况。当只有两个标签时，这称为二进制分类。当有两个以上的类别时，这些问题被称为多类分类。</p><p>回归：在预测连续值时，问题成为回归问题。</p><p>预测：这是根据过去和现在的数据对未来进行预测的过程。它最常用于分析趋势。一个常见的例子可能是根据当年和前几年的销售情况估算下一年的销售额。</p><p>半监督学习</p><p>监督式学习带来的挑战是标签数据可能很昂贵而且耗时。如果标签有限，可以使用未标记的示例来增强监督式学习。因为在这种情况下机器没有完全监督，所以我们说机器是半监督的。使用半监督学习，您可以使用带有少量标签数据的未标记示例来提高学习的准确性。</p><p>无监督学习</p><p>在进行无监督学习时，机器会显示完全未标记的数据。要求发现数据基础的内在模式，如聚类结构，低维流形或稀疏树和图。</p><p>聚类：将一组数据示例分组，以便一个组（或一个聚类）中的示例与其他组中的示例更相似（根据某些标准）。这通常用于将整个数据集分成几个组。可以在每个组中进行分析以帮助用户找到固有模式。</p><p>降维：减少考虑中的变量数量。在许多应用中，原始数据具有非常高的维度特征，并且一些特征对于任务是多余的或不相关的。减少维度有助于找到真实的，潜在的关系。</p><p>强化学习</p><p>强化学习根据环境反馈分析和优化代理的行为。机器尝试不同的场景来发现哪些行为产生最大的回报，而不是被告知要采取哪些行动。反复试验和延迟奖励将强化学习与其他技术区分开来。</p><p>选择算法时的注意事项</p><p>选择算法时，请始终考虑以下方面：准确性，培训时间和易用性。许多用户首先提出了准确性，而初学者倾向于关注他们最熟悉的算法。</p><p>当呈现数据集时，首先要考虑的是如何获得结果，无论结果如何。初学者倾向于选择易于实现并能够快速获得结果的算法。这很好，只要它只是这个过程的第一步。一旦您获得了一些结果并熟悉数据，您可能会花更多时间使用更复杂的算法来加强对数据的理解，从而进一步改进结果。</p><p>即使在这个阶段，最好的算法可能不是那些已经达到最高报告准确率的方法，因为算法通常需要仔细调整和广泛的培训以获得其最佳可实现的性能。</p><p>何时使用特定的算法</p><p>仔细观察个别算法可以帮助您了解它们提供的内容以及它们的使用方式。这些描述提供了更多细节，并提供了何时使用特定算法的附加提示，与备忘单一致。</p><p>线性回归和Logistic回归</p><p><img src="http://pava02hb7.bkt.clouddn.com/4.jpeg" alt=""></p><p>线性回归</p><p><img src="http://pava02hb7.bkt.clouddn.com/5.jpeg" alt=""></p><p>逻辑回归</p><p>线性回归是模拟连续因变量yy与一个或多个预测因子XX之间关系的一种方法。</p><p>在逻辑回归中，我们使用不同的假设类来尝试预测给定示例属于“1”类的概率与其属于“-1”类的概率。</p><p>线性SVM和内核SVM</p><p>内核技巧用于将非线性可分的函数映射为更高维的线性可分的函数。支持向量机（SVM）训练算法找到由超平面的法向量ww和偏置量bb表示的分类器。这个超平面（边界）尽可能宽地分隔不同的类。该问题可以转化为约束优化问题：</p><p>minimizewsubject to||w||yi(wTXib)≥1,i=1,…,n.minimizew||w||subject toyi(wTXib)≥1,i=1,…,n.</p><p>支持向量机（SVM）训练算法找到由法向量表示的分类器和超平面的偏差。这个超平面（边界）尽可能宽地分隔不同的类。该问题可以转化为约束优化问题：</p><p><img src="http://pava02hb7.bkt.clouddn.com/6.jpeg" alt=""></p><p>内核技巧用于将非线性可分的函数映射为更高维的线性可分的函数</p><p>当类不是线性可分的时候，可以使用内核技巧将非线性可分的空间映射到更高维的线性可分的空间。</p><p>当大多数因变量是数字时，logistic回归和SVM应该是分类的第一次尝试。这些模型易于实现，参数调整容易，性能也相当不错。所以这些模型适合初学者。</p><p>Trees and ensemble trees</p><p><img src="http://pava02hb7.bkt.clouddn.com/7.jpeg" alt=""></p><p>预测模型的决策树</p><p>决策树，随机森林和梯度提升都是基于决策树的算法。决策树有许多变体，但它们都做同样的事情 - 将特征空间细分成大多数标签相同的区域。决策树很容易理解和实施。但是，当我们耗尽树枝并且深入树木时，它们倾向于过度拟合数据。随机Forrest和渐变提升是两种使用树算法实现良好精确度以及克服过度拟合问题的流行方法。</p><p>神经网络和深度学习</p><p><img src="http://pava02hb7.bkt.clouddn.com/8.jpeg" alt=""></p><p>卷积神经网络架构</p><p>神经网络在20世纪80年代中期由于其并行和分布式处理能力而兴旺发达。但是在这个领域的研究受到广泛用于优化神经网络参数的反向传播训练算法的无效性的阻碍。支持向量机（SVM）和其他更简单的模型，通过求解凸优化问题可以很容易地进行训练，逐渐取代机器学习中的神经网络。</p><p>近年来，诸如无监督预训练和分层贪婪训练等新的和改进的训练技术已经导致对神经网络重新兴趣。日益强大的计算能力，例如图形处理单元（GPU）和大规模并行处理（MPP），也刺激了神经网络的复兴。神经网络的复兴研究已经引发了具有数千层的模型的发明。</p><p><img src="http://pava02hb7.bkt.clouddn.com/9.jpeg" alt=""></p><p>SAS Visual Analytics中的神经网络</p><p>换句话说，浅层神经网络已演变成深度学习神经网络。深度神经网络对于监督学习非常成功。当用于语音和图像识别时，深度学习的表现与人类一样好，甚至更好。应用于无监督学习任务（如特征提取），深度学习还可从原始图像或语音中提取特征，而人工干预则更少。</p><p>神经网络由三部分组成：输入层，隐藏层和输出层。训练样本定义了输入和输出层。当输出层是一个分类变量时，那么神经网络就是解决分类问题的一种方法。当输出层是一个连续变量时，网络可以用来做回归。当输出层与输入层相同时，网络可用于提取内在特征。隐藏层的数量定义了模型的复杂性和建模能力。</p><p>深度学习</p><p>K均值/ k模式，GMM（高斯混合模型）聚类</p><p><img src="http://pava02hb7.bkt.clouddn.com/10.jpeg" alt=""></p><p>K均值聚类</p><p><img src="http://pava02hb7.bkt.clouddn.com/11.jpeg" alt=""></p><p>高斯混合模型</p><p>Kmeans/k-modes, GMM聚类旨在将n个观测分为k个聚类。K-means定义硬分配：样本将被且仅被关联到一个群集。然而，GMM为每个样品定义一个软分配。每个样本都有与每个群集关联的概率。当给定聚类数目k时，两种算法都足够简单快速地进行聚类。</p><p>DBSCAN</p><p><img src="http://pava02hb7.bkt.clouddn.com/12.jpeg" alt=""></p><p>当未给定群集k的数量时，可以通过密度扩散将样本连接起来使用DBSCAN(基于密度的空间聚类)。</p><p>分层聚类</p><p><img src="http://pava02hb7.bkt.clouddn.com/13.jpeg" alt=""></p><p>可以使用树结构(dendrogram)可视化分层分区。它不需要作为输入的集群数量，并且可以在不同级别的粒度上查看分区(i.e., can refine/coarsen clusters)使用不同的K。</p><p>PCA，SVD和LDA</p><p>我们通常不希望直接将大量特征提供给机器学习算法，因为某些特征可能不相关，或者“内在”维度可能小于特征的数量。主成分分析（PCA），奇异值分解（SVD）和 潜在狄利克雷分配（LDA）均可用于降维。</p><p>PCA是一种无监督聚类方法，它将原始数据空间映射到较低维空间，同时保留尽可能多的信息。PCA基本上找到最能保留数据方差的子空间，子空间由数据协方差矩阵的主要特征向量定义。</p><p>SVD与PCA有关，因为中心数据矩阵（特征对样本）的SVD提供定义与PCA发现的相同子空间的主导左奇异向量。然而，SVD是一种更通用的技术，因为它也可以做PCA不能做的事情。例如，用户对电影矩阵的SVD能够提取可以在推荐系统中使用的用户简档和电影简档。另外，在自然语言处理（NLP）中，SVD还被广泛用作主题建模工具，称为潜在语义分析。</p><p>NLP中的相关技术是潜在Dirichlet分配（LDA）。LDA是概率性主题模型，它以与高斯混合模型（GMM）将连续数据分解为高斯密度相似的方式将文档分解为主题。与GMM不同的是，LDA对离散数据（文档中的词）进行建模，并且它约束根据Dirichlet分布该主题是先验分布的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个典型的问题是“我应该使用哪种算法？”&lt;/p&gt;
&lt;p&gt;问题的答案取决于许多因素，其中包括：&lt;/p&gt;
&lt;p&gt;数据的大小，质量和性质。&lt;/p&gt;
&lt;p&gt;可用的计算时间。&lt;/p&gt;
&lt;p&gt;任务的紧迫性。&lt;/p&gt;
&lt;p&gt;你想要对数据做什么。&lt;/p&gt;
&lt;p&gt;机器学习算法备忘单&lt;/p&gt;

      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="机器学习" scheme="https://lqq-smile.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>说话太直？我找到办法了</title>
    <link href="https://lqq-smile.github.io/2018/06/24/%E8%AF%B4%E8%AF%9D%E5%A4%AA%E7%9B%B4%EF%BC%9F%E6%88%91%E6%89%BE%E5%88%B0%E5%8A%9E%E6%B3%95%E4%BA%86/"/>
    <id>https://lqq-smile.github.io/2018/06/24/说话太直？我找到办法了/</id>
    <published>2018-06-24T08:34:49.000Z</published>
    <updated>2018-06-24T09:15:55.061Z</updated>
    
    <content type="html"><![CDATA[<h4 id="由下拉列表想到的"><a href="#由下拉列表想到的" class="headerlink" title="由下拉列表想到的"></a>由下拉列表想到的</h4><p>我是做IT的，对于网页、手机中的下拉列表，我太熟悉了。</p><p>用户在操作网页、手机时，经常需要填写表单，表单里面非常常见的元素就是下拉列表。他就是让用户在几个有限的选项里面选出一个决定。</p><h4 id="说话很直的本质是什么"><a href="#说话很直的本质是什么" class="headerlink" title="说话很直的本质是什么"></a>说话很直的本质是什么</h4><p>有人说：我就是一个直肠子。</p><p>其实，直肠子就是说话没有考虑对方的感受，脱口而出。说明说话者在为人处世方面努力得不够。</p><h4 id="如果说话前都能联想到好玩的东西"><a href="#如果说话前都能联想到好玩的东西" class="headerlink" title="如果说话前都能联想到好玩的东西"></a>如果说话前都能联想到好玩的东西</h4><p>我个人的一个最大的感受是改变自己的缺点真的很难。反反复复，一两天好了，一个星期后又恢复故态。</p><p>强行改变很难成功。一方面，你受的挫折也许还不够大；另一方面，你的方法可能不太好。</p><p>突然间我想到，如果说话之前都能联想到什么有趣的东西，是不是这个毛病就好改了呢？</p><p>所以我想到了下拉列表。</p><h5 id="看到朋友买的衣服不好看"><a href="#看到朋友买的衣服不好看" class="headerlink" title="看到朋友买的衣服不好看"></a>看到朋友买的衣服不好看</h5><p>其实，如果你觉得朋友买的衣服不好看，有好几种方式表达自己的观点，这时候可以联想到一个下拉列表：</p><blockquote><ol><li>丑死了。</li><li>一点也不好看。</li><li>这衣服配不起你的好身材。</li><li>最近你变美了呀，怪不得……</li><li>真羡慕，穿什么都好看，不像我……</li></ol></blockquote><p>你选择哪一个？当然你可以加上更好的选项。</p><h5 id="你的朋友也是直肠子？"><a href="#你的朋友也是直肠子？" class="headerlink" title="你的朋友也是直肠子？"></a>你的朋友也是直肠子？</h5><blockquote><ol><li>傻逼。</li><li>你知不知道你这样很容易得罪人？</li><li>你会付出代价的。</li><li>你觉不觉得你说话很霸气，挺像李小龙。不过，不熟悉你的人可能会误会你。</li><li>我感觉你很适合当超级英雄，你那股霸气就能把坏人吓死。</li></ol></blockquote><p>选一个吧！</p><p>解决方法的关键并不是你会哪些选项，而是在说话之前脑袋里面会不会自动出现一个下拉列表。如果没有这个意识，估计无论你有什么选项都不会起作用。</p><p>练习多了，选项就会越来越多，你会作出更好的选择。</p><p>改变是痛苦的，成长也是痛苦的。我们都希望自己永远待在舒适区，但我们更加明白，温水煮青蛙才是最可怕的。待久了以后，也许你连跳的力气都没有了。所以，跳吧，虽然很累，但这就是人生，我们都是这样过来的。</p><p>我希望自己老的时候回忆自己过去这一生，没有拖累社会，没有拖累国家。我用自己的努力推着社会走了一小步，虽然只是一小步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;由下拉列表想到的&quot;&gt;&lt;a href=&quot;#由下拉列表想到的&quot; class=&quot;headerlink&quot; title=&quot;由下拉列表想到的&quot;&gt;&lt;/a&gt;由下拉列表想到的&lt;/h4&gt;&lt;p&gt;我是做IT的，对于网页、手机中的下拉列表，我太熟悉了。&lt;/p&gt;
&lt;p&gt;用户在操作网页、手机时
      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="说话" scheme="https://lqq-smile.github.io/tags/%E8%AF%B4%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>如何成为leader(转)</title>
    <link href="https://lqq-smile.github.io/2018/06/23/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BAleader/"/>
    <id>https://lqq-smile.github.io/2018/06/23/如何成为leader/</id>
    <published>2018-06-23T09:19:31.000Z</published>
    <updated>2018-06-23T10:02:36.423Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个想成为Leader的程序猿，在工作日常中总结一些作为一个Leader应该具备的要素，以警戒今后成为Leader的我！</p><ul><li><p>分派任务时，要有一定的威严性，最忌用商量的口吻给程序猿们分派任务。</p></li><li><p>最忌朝令夕改，确定并经过评审的设计最好不要改动，稍作修改，改掉的不仅仅是程序猿们辛辛苦苦码出来作品，还有可能是程序猿们的积极性和耐心。而且频繁的这种改动会对程序猿的思路产生很大的干扰。</p></li><li>一定不要吝啬自己对程序员的赞赏，确立有功必赏，有过共同解决的思想。<br>有功必赏：一个好的leader对于积极完成任务，并且完成的很好的程序员不要吝啬自己的赞赏，虽然只是几句夸奖的话，但是也会很好的延长程序员的积极性，从而更加努力的为你工作。如果没有赞赏，此时程序员觉得积极努力提前完成项目和按照计划悠闲的完成任务都一样，那么为什么跟自己过不去呢？消极情绪遍布！<br>有过共同解决：不论是因为程序员个人过错，还是因为外界过程造成的任务无法完成，此时责备程序员是完全没有用处的，没有一个程序员不想解决问题，也没有一个程序员想犯错。遇到问题，不去追究哪个程序员的责任，而是共同商量解决犯法这才是正道。这跟一个程序员遇到一个bug，不去追究是哪个程序员引起的bug，而是致力于去修复这个bug的道理是一样的，一个程序员都可以这样，身为一个leader更应该这样。</li><li>慢下来：做任何事情不宜操之过急，要慢下来，给自己多一些时间去思考，去听取别人的意见和见解，也要给别人时间去生产意见和见解。</li><li>以身作则：Be the change you want to see！作为一个leader，如果想让你的员工更积极的工作，更有热情的工作，那么你就要成为最积极最有热情工作的人。leader，不仅仅是上下级的观念，更是一个带头人，一个带头的人，一个榜样。把你的员工从平常的人带到充满激情活力的人。</li></ul><p>了解业务，了解团队，发现问题，给出方案，解决问题。这过程中保持谦虚谨慎的心态，虚心学习，以服务者的心态去对待团队。<br> <a href="https://link.jianshu.com?t=https://zhuanlan.zhihu.com/p/20517161" target="_blank" rel="noopener">techleader的职责</a><br> <a href="https://link.jianshu.com?t=https://www.zhihu.com/question/31462342" target="_blank" rel="noopener">什么样的前端技术 leader 是称职的？</a></p><h2 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h2><p>前端技术团队一般需要跟后端技术团队、产品经理、项目经理、测试同学打交道。<br> 这时候，<strong>前端技术 leader</strong>的主要职责就是：负责跟各部门沟通，得出合理的技术方案，给手下的同学分活，不时关注下项目进展，如果遇到 block issue 就帮忙给出技术方案，如果遇到跟其他团队扯皮的事情就帮忙沟通下。<br> 另外，前端技术 leader 还要明白前端代码合并压缩打包部署上线的流程，搭建这套环境来方便组内同学使用。<br> 另外，前端技术 leader 对于新的技术的嗅觉要比较敏感，ES6 定稿了，有什么新的 feature 我们可以玩一玩之类的。<br> 另外，前端技术 leader 要懂得推销自己的团队，在任何时刻跟其他团队沟通，或者跟老大短聊，都可以谈谈前端团队做了什么，让老大有点印象。</p><h2 id="1-自身素质要求"><a href="#1-自身素质要求" class="headerlink" title="1.自身素质要求"></a>1.自身素质要求</h2><p>技术上有一定的深度；<br> 知识面上有一定的广度；<br> 善于沟通；<strong>沟通能力</strong><br> 勇于担当</p><h2 id="2-具体做法"><a href="#2-具体做法" class="headerlink" title="2.具体做法"></a>2.具体做法</h2><p>组建团队之前，我自己写了一个底层的开发框架。这样团队进来之后大家都按照统一的框架来开发。节省了大量的时间。<br> 同时在编码规范方面我检查的很严格。经常会做代码评审。<br> 还有就是在一些设计方面给团队提供经验，避免他们走弯路。<br> 还有就是经常会做一些分享，帮助大家拓宽眼界。<br> 也会结对编程的方式和大家一起来解决一些任务，或者bug。</p><h2 id="3-当发生问题，多考虑是否是流程哪出的问题，而不是个人的问题，做一个项目，人的因素被弱化了，流程，氛围最重要。"><a href="#3-当发生问题，多考虑是否是流程哪出的问题，而不是个人的问题，做一个项目，人的因素被弱化了，流程，氛围最重要。" class="headerlink" title="3.当发生问题，多考虑是否是流程哪出的问题，而不是个人的问题，做一个项目，人的因素被弱化了，流程，氛围最重要。"></a>3.当发生问题，多考虑是否是流程哪出的问题，而不是个人的问题，做一个项目，人的因素被弱化了，流程，氛围最重要。</h2><blockquote><p> 无论如何，我几乎从进入计算机行业开始，就开始尝试带团队，从2001年开始，差不多有十几年的时间了。在工作的大部分时间里，我都是以一个团队的方式做事情，期间尝试过各种各样的领导方式，包括数字化管理、事无巨细、敏捷、点对点沟通、散养等等。最终我发现，如果你的团队从事的是创造性工作，那么「无为而治」大概是一种最好的领导方式。在你最大的权限范围内，制定出规则、领域和方向，找到合适的人，让他们尽情发挥就好。<br>      真正好的领导者，不是大包大揽，也不是让下属去完成领导部署的任务，而是让他们做自己真正想做的工作。好的领导者不应该总是去试图领导别人，他们要及时反思，修正自己的思路和决策，听取别人的意见，并把一些决策权交给他人。<br>      2014年我大概是按照这个思路进行的，结果不仅团队获得了个一个现金大奖，我个人的绩效也名列前茅。大概的效果就是：回首往事，我特么好像什么都没做呀。<br>      林纳斯是整个 Linux 项目的负责人，他也只在操作系统内核的争端上进行仲裁和决策，其他时候，大部分是集思广益，多头并进。林纳斯是这么说的：<br>      我有时会赞同他们的工作，有时会批评他们的工作，但是大多数时候我都是放任自流的。如果两个人同时维护了相同的功能，我会接受两份工作成果，评估哪一份更可行。如果两者竞争激烈，那么我会同时拒绝他们，直到其中一位开发者失去了兴趣。</p></blockquote><h2 id="4-团队文化"><a href="#4-团队文化" class="headerlink" title="4.团队文化"></a>4.团队文化</h2><p><a href="https://link.jianshu.com?t=https://www.zhihu.com/question/28373692" target="_blank" rel="noopener">前端 Leader 是如何带领团队和建设团队文化的？</a><br> <strong>是遇到冲突时解决问题的根基与底线</strong></p><h2 id="5-具体任务计划"><a href="#5-具体任务计划" class="headerlink" title="5.具体任务计划"></a>5.具体任务计划</h2><p>（1）xmind熟练<br> （2）任务分解软件<br> （3）markdown</p><h2 id="6-忌讳"><a href="#6-忌讳" class="headerlink" title="6.忌讳"></a>6.忌讳</h2><p>1.不要当“麦霸”，下属说话<strong>不要插嘴</strong>就开始跑火车。——尊重别人<br> 2.不要跑“火车”，<strong>话不多但是有分量</strong><br> 3.不要“总提出问题”，要<strong>有担当</strong>，提出解决问题办法<br> 4.不能“伤自尊”，下达命令时候多用请求和<strong>协商</strong>语气，少用命令和指使的语气</p><h2 id="7-35岁以后的职场人-董明珠"><a href="#7-35岁以后的职场人-董明珠" class="headerlink" title="7.35岁以后的职场人-董明珠"></a>7.<a href="https://link.jianshu.com?t=http://www.toutiao.com/a6442168139094049026/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=10170244997&amp;utm_medium=toutiao_android" target="_blank" rel="noopener">35岁以后的职场人-董明珠</a></h2><p>一定要拥有的四样东西：<br> <strong>扬在脸上的自信</strong><br> <strong>长在心里的善良</strong><br> <strong>融进血液的骨气</strong><br> <strong>刻在生命里的坚强</strong></p><p>为人处事都应遵循两个字：<strong>向上</strong><br> <strong>生命不息！奋斗不止！</strong></p><h2 id="8-管理——-控制和引导"><a href="#8-管理——-控制和引导" class="headerlink" title="8.管理——-控制和引导"></a>8.管理——-控制和引导</h2><p><a href="https://link.jianshu.com?t=http://www.toutiao.com/a6441793536475005454/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=10170244997&amp;utm_medium=toutiao_android" target="_blank" rel="noopener">职场上批评下属，要按照这个金字塔的层次，尽量往低层次说。表扬下属，尽量往高层次说</a></p><p><img src="https://upload-images.jianshu.io/upload_images/1054828-77aa651b644cc150.png?imageMogr2/auto-orient/" alt="img"></p><h1 id="techleader的职责"><a href="#techleader的职责" class="headerlink" title="techleader的职责"></a>techleader的职责</h1><p>最近在思考技术leader应该关注的点。凡是做到技术leader，负责的事情，肯定不是一个人能全部完成的。所需要关注的事情也非常多，千头万绪，纷繁复杂。</p><p>不过，整理起来，主要有以下几个方面：</p><h1 id="1-关注事情：产出"><a href="#1-关注事情：产出" class="headerlink" title="1.关注事情：产出"></a><strong>1.关注事情：产出</strong></h1><p>公司招聘一个团队是为了能够为公司业绩做贡献。要是团队没有产出，对于公司来说，就没有存在的价值了。</p><p><strong>首先，寻找对公司和个人都有价值的事情来做。**</strong>提升团队本身的地位。**</p><p><strong>其次，能够保证团队高效地有质量地完成事情。</strong></p><p><strong>排除风险</strong>：需要对整个事情的每一个细节都有把握，为了完成目标，清楚每一个风险点在哪儿。并且尽自己最大努力提前排出风险。</p><p><strong>关注过程</strong>：为事情制定执行计划，并在计划中确立检查点。有风险提前暴漏，而不是等到最后的时候，才发现无法完成。</p><h1 id="2-关注人"><a href="#2-关注人" class="headerlink" title="2.关注人"></a><strong>2.关注人</strong></h1><p>做事情过程中，要竭力避免：事情做成了，人走了。虽然事情完成了，但是有可能大家没有盼头，觉着自己干的是苦活累活，觉着自己没有什么成长，价值没有增加。这个时候，就需要给予大家机会，让大家觉着自己的价值在提升。</p><p>可以用于激励的手段：</p><ul><li>言语的激励</li><li>有技术积累的开发工作</li><li>面试的机会</li><li>带人的机会</li><li>职级</li><li>薪资</li></ul><h1 id="3-预见"><a href="#3-预见" class="headerlink" title="3.预见"></a><strong>3.预见</strong></h1><p>作为技术leader，对当前团队的发展要有一定的预见性。至少要有提前一个季度（要求比较低）的眼光，对未来的趋势有预判。一方面给大家一个盼头，另一方面，对未来可能遇到的风险提前做准备，把风险消灭于萌芽状态。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>假如把所有需要的事情排一个优先级，产出&gt;预见&gt;人。团队有产出，才有存在的价值。能够预见未来，才能给大家希望，才能做好人的工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个想成为Leader的程序猿，在工作日常中总结一些作为一个Leader应该具备的要素，以警戒今后成为Leader的我！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分派任务时，要有一定的威严性，最忌用商量的口吻给程序猿们分派任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最忌朝令夕改，
      
    
    </summary>
    
      <category term="项目管理" scheme="https://lqq-smile.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="方法论" scheme="https://lqq-smile.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>怎样看待中国教育</title>
    <link href="https://lqq-smile.github.io/2018/06/23/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%BE%85%E4%B8%AD%E5%9B%BD%E6%95%99%E8%82%B2/"/>
    <id>https://lqq-smile.github.io/2018/06/23/怎样看待中国教育/</id>
    <published>2018-06-23T07:35:46.000Z</published>
    <updated>2018-06-23T08:00:22.589Z</updated>
    
    <content type="html"><![CDATA[<h4 id="任何一个政治者，都只能做能做的事"><a href="#任何一个政治者，都只能做能做的事" class="headerlink" title="任何一个政治者，都只能做能做的事"></a>任何一个政治者，都只能做能做的事</h4><p>你觉得当大boss容易？你为什么不去试试？</p><p>任何一个不具有现实性和可行性的事情，当政者都是不会做的。如果你是总统、首相，你会不会实行一个不具有现实性的国策呢？</p><p>很多人骂某国，某党，说他们为什么XXX，为什么不XXX。但是，如果你当上大boss，你就会知道，网民的许多请求不具有现实性。反贪我也想，可你叫我怎么反？把所有官员都抓起来，都枪毙了了事吗？政府的事情谁来管，事情谁来做呢？</p><h4 id="为什么不实行普世价值观"><a href="#为什么不实行普世价值观" class="headerlink" title="为什么不实行普世价值观"></a>为什么不实行普世价值观</h4><p>当然的道理，如果给你做大boss，你敢提这件事情吗？</p><blockquote><p>权力来自于责任。</p><p>我能当大boss，是因为我是所得利益集团的总代理人。</p><p>你觉得我在号令群雄？不，是群雄在号令我。</p></blockquote><p>从以上的观点你可以看出来，大boss的权力基础是他必须做对所得利益集团总体有利的事。如果大boss做不好，他就要下台。这跟公司的CEO是同样的道理：他的职责是带领大家实现企业的最大利益，如果他做不好，他就必须辞职！</p><p>权力来自于责任。这句话理解吗？因为他负有重要的责任，所以大家才给了他权力，给了他信任。</p><p>你要大boss实行不符合集体利益的事情。一方面不会成功，另一方面他只会在一场流血事件之后黯然离开。</p><h4 id="只能在保持现有利益集团总体利益的情况下做调整"><a href="#只能在保持现有利益集团总体利益的情况下做调整" class="headerlink" title="只能在保持现有利益集团总体利益的情况下做调整"></a>只能在保持现有利益集团总体利益的情况下做调整</h4><p>我是大boss，我对国家负有生死存亡的责任，我必须对国家和人民负责。但是，我也要平衡利益集团的利益，不能让他们吃亏。所以：</p><ol><li>保证现有利益集团的利益，不要动他们的奶酪。</li><li>兼顾普通民众的心声，可以雷声大雨点小，但要做点实事。对于过份的权贵，即使他也是利益集团的一员，只要不动大部分利益集团，干掉一两个是必要的。</li><li>不要让普通民众饿着。他们可以不富裕，但不能逼，逼急肯定出事。而且，不出事也符合利益集团的总体利益。</li><li>利益集团不仅有内在稳定的需要，也有对外安全的需要。所以，必须增强国力，增加民众的受教育程度，增加小兵们的实力。只要小兵们听话，他们强一点没有坏处。</li><li>对于破坏力太强的一些激进分子，要加以镇压。抄抄水表没坏处。尤其是说政府变态的人。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;任何一个政治者，都只能做能做的事&quot;&gt;&lt;a href=&quot;#任何一个政治者，都只能做能做的事&quot; class=&quot;headerlink&quot; title=&quot;任何一个政治者，都只能做能做的事&quot;&gt;&lt;/a&gt;任何一个政治者，都只能做能做的事&lt;/h4&gt;&lt;p&gt;你觉得当大boss容易？你为
      
    
    </summary>
    
      <category term="政治历史" scheme="https://lqq-smile.github.io/categories/%E6%94%BF%E6%B2%BB%E5%8E%86%E5%8F%B2/"/>
    
    
      <category term="教育" scheme="https://lqq-smile.github.io/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>老板喜欢哪些话</title>
    <link href="https://lqq-smile.github.io/2018/06/23/%E8%80%81%E6%9D%BF%E5%96%9C%E6%AC%A2%E5%93%AA%E4%BA%9B%E8%AF%9D/"/>
    <id>https://lqq-smile.github.io/2018/06/23/老板喜欢哪些话/</id>
    <published>2018-06-23T05:20:46.000Z</published>
    <updated>2018-06-23T08:02:36.063Z</updated>
    
    <content type="html"><![CDATA[<ol><li>听了舒服的话。</li><li>为他辩解的话。</li><li>表达自己为他做更多事情的话。</li><li>顾全大局的话。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;听了舒服的话。&lt;/li&gt;
&lt;li&gt;为他辩解的话。&lt;/li&gt;
&lt;li&gt;表达自己为他做更多事情的话。&lt;/li&gt;
&lt;li&gt;顾全大局的话。&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="说话" scheme="https://lqq-smile.github.io/tags/%E8%AF%B4%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>为何你当不了徐庶</title>
    <link href="https://lqq-smile.github.io/2018/06/23/%E4%B8%BA%E4%BD%95%E4%BD%A0%E5%BD%93%E4%B8%8D%E4%BA%86%E5%BE%90%E5%BA%B6/"/>
    <id>https://lqq-smile.github.io/2018/06/23/为何你当不了徐庶/</id>
    <published>2018-06-22T17:10:00.000Z</published>
    <updated>2018-06-22T17:23:53.951Z</updated>
    
    <content type="html"><![CDATA[<h4 id="徐庶面对着哪些难题？"><a href="#徐庶面对着哪些难题？" class="headerlink" title="徐庶面对着哪些难题？"></a>徐庶面对着哪些难题？</h4><blockquote><p>《新三国》比旧三国在感情上面更加细致。</p></blockquote><ol><li>关、张、赵等不服。</li><li>你真的确定你的计谋是对的？万一打了败仗，你知道后果吗？</li><li>你确定你的能力足够？会不会想不出点子？</li><li>为人处世的能力足够吗？平时说话各方面合理吗？人际关系处理得好吗？情商够吗？</li><li>自己的计划能力足够吗？执行力足够吗？</li></ol><p>所以，你以为军师好做？刘备请徐庶做军师，徐庶不敢答应，绝对不是故意谦虚，而是真的怕做不好丢面子打败仗。首先心理这关就不好过。</p><h4 id="如果是自己呢？"><a href="#如果是自己呢？" class="headerlink" title="如果是自己呢？"></a>如果是自己呢？</h4><p>如果自己就是徐庶，并且真的有这样的才能，同样的问题是不是一样会出现。</p><p> 这跟跳槽找更高职位是不是同样的道理？如何评估自己真的具备了跳槽的实力？</p><h4 id="得到什么启示"><a href="#得到什么启示" class="headerlink" title="得到什么启示"></a>得到什么启示</h4><ol><li>做事前多考虑考虑，别冲动。</li><li>不要用“感觉”来做决定。我感觉我可以，这话听起来多不靠谱。</li><li>详细的计划和客观的分析使成功率大许多。</li><li>冷静处事。</li><li>提升责任心。清楚答应意味着什么，不答应意味着什么。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;徐庶面对着哪些难题？&quot;&gt;&lt;a href=&quot;#徐庶面对着哪些难题？&quot; class=&quot;headerlink&quot; title=&quot;徐庶面对着哪些难题？&quot;&gt;&lt;/a&gt;徐庶面对着哪些难题？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;《新三国》比旧三国在感情上面更加细致。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="情商" scheme="https://lqq-smile.github.io/tags/%E6%83%85%E5%95%86/"/>
    
      <category term="做事" scheme="https://lqq-smile.github.io/tags/%E5%81%9A%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>论做事靠谱性</title>
    <link href="https://lqq-smile.github.io/2018/06/23/%E8%AE%BA%E5%81%9A%E4%BA%8B%E9%9D%A0%E8%B0%B1%E6%80%A7/"/>
    <id>https://lqq-smile.github.io/2018/06/23/论做事靠谱性/</id>
    <published>2018-06-22T16:50:46.000Z</published>
    <updated>2018-06-22T17:02:41.512Z</updated>
    
    <content type="html"><![CDATA[<h4 id="何为靠谱"><a href="#何为靠谱" class="headerlink" title="何为靠谱"></a>何为靠谱</h4><blockquote><p>与高情商者聊天，与靠谱的人做事</p></blockquote><p>高情商者未必靠谱。</p><p>有些人很会说话，句句让你乐开了花。可是他做事丢三落四，没头没尾。</p><p>有些人很不讨喜，说话像僵尸一般，但做事很得力，往往拿得出成果，出得了有成绩。</p><p>第2种人就是靠谱的人。</p><h4 id="为何不靠谱"><a href="#为何不靠谱" class="headerlink" title="为何不靠谱"></a>为何不靠谱</h4><ol><li>关注点只在讨人喜欢上，对做事效果毫无兴趣。</li><li>缺少责任心。</li><li>没有经历过大的挫折，对失败的可怕没有亲身体会过。</li></ol><h4 id="如何提升靠谱性"><a href="#如何提升靠谱性" class="headerlink" title="如何提升靠谱性"></a>如何提升靠谱性</h4><ol><li>反思自己的失败事迹。感受失败带来的挫折感。</li><li>好好体会失败给自己带来的职业生涯上的坏处。</li><li>天天问自己：如果我今天不做好，明天公司就会炒我鱿鱼，我会有多惨。</li><li>反问自己：你还有多少次失败的机会呢？</li><li>你只顾着做事，忘记了为人处世的重要性了吗？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;何为靠谱&quot;&gt;&lt;a href=&quot;#何为靠谱&quot; class=&quot;headerlink&quot; title=&quot;何为靠谱&quot;&gt;&lt;/a&gt;何为靠谱&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;与高情商者聊天，与靠谱的人做事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;高情商者未必靠谱。&lt;/p
      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="情商" scheme="https://lqq-smile.github.io/tags/%E6%83%85%E5%95%86/"/>
    
      <category term="做事" scheme="https://lqq-smile.github.io/tags/%E5%81%9A%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>好马出在腿上，能人出在嘴上</title>
    <link href="https://lqq-smile.github.io/2018/06/22/%E5%A5%BD%E9%A9%AC%E5%87%BA%E5%9C%A8%E8%85%BF%E4%B8%8A%EF%BC%8C%E8%83%BD%E4%BA%BA%E5%87%BA%E5%9C%A8%E5%98%B4%E4%B8%8A/"/>
    <id>https://lqq-smile.github.io/2018/06/22/好马出在腿上，能人出在嘴上/</id>
    <published>2018-06-22T15:31:27.000Z</published>
    <updated>2018-06-22T15:46:37.236Z</updated>
    
    <content type="html"><![CDATA[<h5 id="吃低情商的亏，太痛了"><a href="#吃低情商的亏，太痛了" class="headerlink" title="吃低情商的亏，太痛了"></a>吃低情商的亏，太痛了</h5><p>低情商，就是平时脑袋的关注点永远不在为人处世上，而是别的事情。一个人如果对为人处世之道从来不思考，不改正错误，当然在这上面一再吃亏。</p><h5 id="好马出在腿上，能人出在嘴上"><a href="#好马出在腿上，能人出在嘴上" class="headerlink" title="好马出在腿上，能人出在嘴上"></a>好马出在腿上，能人出在嘴上</h5><p>一匹好马，跑得飞快，但由于不会说话，它只是供人驱策的畜生。</p><p>能人从来不需要在专业技术上有过份突出的能力，但他的嘴巴可厉害了。他知道什么时候说什么话，他洞察人心，深知人情世故。</p><p>你愿意做畜生还是做能人？</p><h5 id="专业技术能力与说话能力"><a href="#专业技术能力与说话能力" class="headerlink" title="专业技术能力与说话能力"></a>专业技术能力与说话能力</h5><p>这两种很多情况下是矛盾的。你很多时候都不可能同时在这两方面都很精通，最多只能在一方面做好。</p><p>但做到两方面都不太差，是可能的。</p><p>为人处世非常强的人，可以不会任何专业技术，单靠一把嘴活着。但这样的人能有几个？</p><p>所以，最好是有过强的专业技术，同时在为人处世上不太差。</p><ol><li>知道哪些话是明显得罪人的。</li><li>改正以自我为中心的思维习惯。说话不要只图自己爽。</li><li>平时要有警惕之心。多反思自己的行为对自己有好处。</li><li>学会讨好别人。只有跟别人好好相处才可以将事办成。</li><li>再强的人，如果不能融入团队，死都不知道怎么死的。</li><li>绝对不能得罪领导！</li><li>学会圆滑，学会委婉，改正直肠直肚的坏习惯。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;吃低情商的亏，太痛了&quot;&gt;&lt;a href=&quot;#吃低情商的亏，太痛了&quot; class=&quot;headerlink&quot; title=&quot;吃低情商的亏，太痛了&quot;&gt;&lt;/a&gt;吃低情商的亏，太痛了&lt;/h5&gt;&lt;p&gt;低情商，就是平时脑袋的关注点永远不在为人处世上，而是别的事情。一个人如果对为
      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="情商" scheme="https://lqq-smile.github.io/tags/%E6%83%85%E5%95%86/"/>
    
      <category term="说话" scheme="https://lqq-smile.github.io/tags/%E8%AF%B4%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归数学原理</title>
    <link href="https://lqq-smile.github.io/2018/06/22/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%95%B0%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
    <id>https://lqq-smile.github.io/2018/06/22/逻辑回归数学原理/</id>
    <published>2018-06-22T10:40:17.000Z</published>
    <updated>2018-06-22T12:31:56.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求解原理"><a href="#求解原理" class="headerlink" title="求解原理"></a>求解原理</h3><h4 id="Sigmoid-函数"><a href="#Sigmoid-函数" class="headerlink" title="Sigmoid 函数"></a>Sigmoid 函数</h4><script type="math/tex; mode=display">y={1\over {1+e^{-z}}}</script><p>先看看这个函数样子：</p><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=33afcd8303f79052fb124f6c6d9abcaf/d009b3de9c82d158dfb4e7218a0a19d8bc3e426f.jpg" alt=""></p><p>可以看到，无论z取值如何，这个函数的结果总是在0到1之间。且以原点对称。</p><p>0和1，我们是不是联想到概率呢？概率总是在0与1之间取值。</p><h4 id="联想"><a href="#联想" class="headerlink" title="联想"></a>联想</h4><p>假设有一堆数据。这些数据有一些特征值，还有一个分类结果。那么我们可不可以像线性回归那样通过特征值求出一个参数向量$\theta$,使模拟出来的分类的概率跟真实分类最接近呢？如下表达：</p><script type="math/tex; mode=display">h_\theta(x)={1\over {1+{e^{-\theta^TX}}}}</script><p>其中，$h_\theta(x)$为每个样式计算出来的概率值，比如为80%（0.8），即为分类1的概率为80%。比如，已知某样式分类为1，$h_\theta(x)$就是出现该样本数据分类为1的概率。我们当然是希望概率越符合越好。即如果真实分类为分类1，我们希望概率值越大越好，反之，我们希望概率越小越好。如果有N个样本，那么符合每一个分类的概率为他们的联合概率。即计算累乘。</p><h4 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h4><p>设分类为1时，概率为$h_\theta(x)$，那么分类为0时就是$1-h_\theta(x)$。那么：</p><script type="math/tex; mode=display">\begin{cases}P(y_i=1|x_i;\theta)=h_\theta(x_i) ={1\over {1+{e^{-\theta^Tx_i}}}} \\P(y_i=0|x_i;\theta)=1-h_\theta(x_i)=1-{1\over {1+{e^{-\theta^Tx_i}}}} \\\end{cases}</script><p>整合上面两个式子，可以设样本如此分类出现的概率为：</p><script type="math/tex; mode=display">P(y_i|x_i;\theta)=h_\theta(x_i)^{y_i}(1-h_\theta(x_i))^{1-y_i}</script><p>上面那个式子是要解释一下的，因为一开始我也看不懂。</p><p>因为y只能取1和0，那么试一下将1和0代入上面那个式子看看？上面那个式子并不是推导出来的，而是设出来的。我们为了可以计算y=0或者1的概率，即随意计算这两个结果的概率，而不是只能计算其中一个值，于是设出上面那个式子。显然，无论y取值是1还是0，结果都是对的。</p><p>有了上面那个式子，那么，根据联合概率公式（这个公式是机器学习中非常常见），所有样本这样出现的总概率为：</p><script type="math/tex; mode=display">P(y|x;\theta)= \prod_{i=1}^m P(y_i|x_i;\theta)=\prod_{i=1}^m h_\theta(x_i)^{y_i}(1-h_\theta(x_i))^{1-y_i}</script><p>取对数，得：</p><script type="math/tex; mode=display">ln(P(y|x;\theta))=ln( \prod_{i=1}^m P(y_i|x_i;\theta))=ln(\prod_{i=1}^m h_\theta(x_i)^{y_i}(1-h_\theta(x_i))^{1-y_i})</script><p>于是，我们可以这样求偏导：</p><script type="math/tex; mode=display">(ln(P(y|x;\theta)))'=(ln(\prod_{i=1}^m h_\theta(x_i)^{y_i}(1-h_\theta(x_i))^{1-y_i}))' \\=(\sum_{i=1}^m(y_ilnh_\theta(x_i)+(1-y_i)ln(1-h_\theta(x_i))))' \\=\sum_{i=1}^m(y_i {1\over {h_\theta(x_i)}}-(1-y_i){1\over{1-h_\theta(x_i)}})(h_\theta(x_i))'</script><p>问题来了，</p><script type="math/tex; mode=display">(h_\theta(x))'</script><p>是什么？上面已知：</p><script type="math/tex; mode=display">h_\theta(x)={1\over {1+{e^{-\theta^TX}}}}</script><p>所以，关键是对Sigmoid 函数求导。</p><h4 id="sigmoid函数求导"><a href="#sigmoid函数求导" class="headerlink" title="sigmoid函数求导"></a>sigmoid函数求导</h4><script type="math/tex; mode=display">(h_\theta(x_i))'=({1\over {1+{e^{-\theta^Tx_i}}}})' \\</script><p>设$z=\theta^Tx_i$,$y={1\over{1+e^{-z}}}$我们有：</p><script type="math/tex; mode=display">(h_\theta(x_i))' \\=({1\over {1+{e^{-\theta^Tx_i}}}})' \\=({1\over {1+{e^{-z}}}})'  \\=-{1\over({1+e^{-z}})^2}(1+e^{-z})' \\=-{1\over({1+e^{-z}})^2}(-e^{-z}) \\={1\over{1+e^{-z}}}-{1\over({1+e^{-z}})^2} \\=y(1-y)</script><p>使用上面的变量是为了简化表达。</p><h4 id="继续推导"><a href="#继续推导" class="headerlink" title="继续推导"></a>继续推导</h4><p>所以，我们继续上面的偏导推导,设$h_\theta(x_i)=g(\theta^Tx_i)$：</p><script type="math/tex; mode=display">(ln(P(y|x;\theta)))'=(ln(\prod_{i=1}^m h_\theta(x_i)^{y_i}(1-h_\theta(x_i))^{1-y_i}))' \\=(\sum_{i=1}^m(y_ilnh_\theta(x_i)+(1-y_i)ln(1-h_\theta(x_i))))' \\=\sum_{i=1}^m(y_i {1\over {h_\theta(x_i)}}-(1-y_i){1\over{1-h_\theta(x_i)}})(h_\theta(x_i))' \\=\sum_{i=1}^m(y_i {1\over {g(\theta^Tx_i)}}-(1-y_i){1\over{1-g(\theta^Tx_i)}})g(\theta^Tx_i)(1-g(\theta^Tx_i))(\theta^Tx_i)' \\=\sum_{i=1}^m(y_i {1\over {g(\theta^Tx_i)}}-(1-y_i){1\over{1-g(\theta^Tx_i)}})g(\theta^Tx_i)(1-g(\theta^Tx_i))x_i^j \\=\sum_{i=1}^m (y_i-g(\theta^Tx_i))x_i^j</script><p>其中，$x_i^j$表示第i行，第j个特征值样本。</p><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>通过上面的推导，我们已经求得了在逻辑回归中，任意一个参数$\theta_j$的迭代方式。设$\alpha$为导数迭代的步长。为了求出$\theta$向量，我们可以使用梯度下降算法。首先，我们随意初始化一个$\theta$向量，然后不断向着梯度下降的方向进行迭代，直到每一个向量值不再下降为止。所以迭代方式：</p><script type="math/tex; mode=display">\theta_j := \theta_j-\alpha{1\over m}\sum_{i=1}^m (y_i-g(\theta^Tx_i))x_i^j</script><p>只要迭代的方向总是与导数正负相反，就会向下降的方向。${1\over m}$是为了消除累加影响。$\alpha$一般取值很小，以减少步长。</p><p>通过上面的方式，我们就巧妙地算出了最佳参数向量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;求解原理&quot;&gt;&lt;a href=&quot;#求解原理&quot; class=&quot;headerlink&quot; title=&quot;求解原理&quot;&gt;&lt;/a&gt;求解原理&lt;/h3&gt;&lt;h4 id=&quot;Sigmoid-函数&quot;&gt;&lt;a href=&quot;#Sigmoid-函数&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="逻辑回归" scheme="https://lqq-smile.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>为什么道理都懂，可就是做不到</title>
    <link href="https://lqq-smile.github.io/2018/06/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%81%93%E7%90%86%E4%BD%A0%E9%83%BD%E6%87%82%EF%BC%8C%E4%BD%86%E5%B0%B1%E6%98%AF%E5%81%9A%E4%B8%8D%E5%88%B0/"/>
    <id>https://lqq-smile.github.io/2018/06/21/为什么道理你都懂，但就是做不到/</id>
    <published>2018-06-21T13:46:00.000Z</published>
    <updated>2018-06-21T13:48:24.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 知易行难释义：</p><p> “知道应该做什么”很容易，但“实际上怎么做”却不一定是对的。因为行，并不是由知驱动的。“知道应该做什么”和“想做什么”是两码事，而后者才是起决定性作用。</p></blockquote><p>经常有人说：“道理我都懂，就是做不到”，或者说“道理说说容易，做起来难。”。说这句话的人的潜台词是什么呢？</p><h4 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h4><ol><li>道理并没有真正懂：好多只是骗自己。</li><li>道理我都懂。我虽然知道这样做，是对我有好处的，我完全理解你所说的“做这件事的好处，或者不做的坏处”。可我就是做不到。潜台词是“因为我懒惰，因为我不想离开舒适圈”！但是即使这件事的利弊真如你所说，这也不足以推动我，让我放弃原有的状态而照你说的去做。因为我根本不想改变。</li><li>本质上说，不是“做不到”，而是当下，做出了选择，选择“不去做”！为什么不去做，是因为后果和结局可逆，有婉转的余地，如果产生一定的后果或者结果不可逆，肯定会产生去做的动力！</li></ol><h4 id="道理你真的懂吗？"><a href="#道理你真的懂吗？" class="headerlink" title="道理你真的懂吗？"></a>道理你真的懂吗？</h4><ol><li>世上，未有知而不行者，只因不知。——王阳明</li><li>懂而不做，只因不懂。所以别说懂，你只是听过这种道理。</li><li>你听的道理都是别人的道理，你还没有经历，还没有把它变成自己 的道理。所以你做不到。</li><li>道理只有你真正懂了，应用了，它才是有意义的。你看过那么多心灵鸡汤成功学，却每天都在无所事事，有什么用呢？安慰自己吗？道理是人家的，行动才是自己的。那些说“道理我都懂，就是做不到”的人，不是他们做不到，是他们还没懂。</li><li>所谓的“懂”，可以有很多层次。一个道理，100个人都说懂，但懂1分的，执行力绝对比不上懂100分的。</li><li>大部分人的问题都在于“不知道自己不知道”。于是，纠结于为什么“知道”却“做不到”。因此，区分开“知道”和“懂得”是非常有意义的，这样可以帮助我们做到诚实与谦卑，如果“不能行”，就是说明我们没有真正“知道”。</li></ol><h4 id="知道，为什么做不到"><a href="#知道，为什么做不到" class="headerlink" title="知道，为什么做不到"></a>知道，为什么做不到</h4><h5 id="利害体验不足"><a href="#利害体验不足" class="headerlink" title="利害体验不足"></a>利害体验不足</h5><p>趋利避害是人的本性。<strong>当趋利避害的行为确实获得一些利益，则会指导这次行为的价值判断。利害认知也会得到强化，并逐步融入价值观念中，成为其价值观的一部分，并做为以后的行为依据。</strong></p><p>所谓利益，就是当事人切实的感觉到自己这么做的好处。</p><p>人之所以知易行难，原因之一就是：利害体验不足。</p><p>一个人之所以对某一件事情，一直秉持“道理我都懂，但就是做不到”，恰恰是这件事对于他而言，还没有让他感受到“做到之后的好处”以及“做不到的坏处”。当然，不是说一点感受都没有，而是感受并不深刻，他没有真正从践行中获益。</p><p>也就是说，这两种情形会导致人们“知易行难”：</p><blockquote><ol><li>对努力后的利益，感觉不足；</li><li>对不努力的害处感受不深</li></ol></blockquote><p>这两种同时起作用，就会让人一直停留在“不去做也不太坏，做了也不见得有多好”的情境中，以至于他从来都没有机会去体验做到之后的好处。</p><p>就比如，多数人都知道控制好情绪的重要，但是多数人也没有因为情绪问题，而受过太大的伤害。或者体验到调整情绪带来的切实好处。平时在家里随意发脾气，家人之间最多是矛盾多一些，也没有让自己伤筋动骨，偶尔，哪天自己做好了，也没有及时收到家人的反馈和表扬，所以，也就随意为之了。然而，当真正危害到利益的时候，就不一样了，就如夫妻面临离婚，平时拿到的也开始去做了，因为“趋利避害”。</p><p>人的行动不是由知道驱动的，而是由欲望驱动。别人告诉你“你应该怎么做”这也只是道理，而道理是限于理性层面，只有自己真正集会道理背后可能带来的情绪体验或者切实利益，特此产生了欲望，才是“你想做的”。而很多人就是处于“别人说这么做有好处”的状态中。他自己并没有真正“想这么做”，所以，在听完一个道理完全没有实践的时候，就给自己一个结论说“臣妾做不到”。</p><h5 id="因为别人去做某事，这种事儿成功的概率很小"><a href="#因为别人去做某事，这种事儿成功的概率很小" class="headerlink" title="因为别人去做某事，这种事儿成功的概率很小"></a>因为别人去做某事，这种事儿成功的概率很小</h5><p>就好像“减肥”这件事！但是很多减肥失败，不是缺乏，而是因为他们并不觉得自己多胖。我们听到的胖，都是别人觉得我胖了，所以我就觉得，我要减肥。</p><p>再比如你自己很亲，但是看到别人都很忙，于是心里就想着！我不能被人落下，我也得找点事儿干，要不报个培训班吧！要不学个PPT吧！要不去个啥吧！</p><p>这个行为特别像小学的时候，看到隔壁家录制每天学习到11点，自己哪怕是打瞌睡，困得头都抬不起来，也要让台灯比他多亮半个小时才去睡，仿佛这样就战胜了他一样。</p><p>就好像去听一个讲座，看周围的人都 在奋笔疾书记录，自己却一脸懵逼不知道写啥，于是这时候只好把旁边的资料照着抄一下，因为大家都在写，我也总要写点什么吧!</p><p>因为大家都去做了，所以我也要做点什么，抱着这样目的出发，你不太容易会获得成绩。</p><h5 id="想清楚“我想做的，我适合做的，我应该做的”"><a href="#想清楚“我想做的，我适合做的，我应该做的”" class="headerlink" title="想清楚“我想做的，我适合做的，我应该做的”"></a>想清楚“我想做的，我适合做的，我应该做的”</h5><h6 id="我想做的"><a href="#我想做的" class="headerlink" title="我想做的"></a>我想做的</h6><p>这样的事情一旦真的行动起来，或许会有两种极端的结果：</p><blockquote><p>一种是，你做的特别投入，你研究的特别深入，然后成果也是一个接着一个。比如读书窝囊，有的人很容易上瘾和着迷，有息时间我特别迷恋时间管理的书，往往是读了一本之后，不会找到书里面提到的书，作者的其他书，以及这类型评价最高的书，完全有一种欲罢不能的快感。</p><p>另外一种是，其实很多事你真去做了，才发现和自己看到的不太一样，原来你看到的只是逐句，你一直潜意识没开始行动，也许不过 是意识到了你没天分，你吃不了这个苦，你压根、喜欢的确实不是这个东西本身，而只是表面。</p></blockquote><p>比如有的人说自己喜欢广告，但是可能他只是喜欢看广告，而未必是喜欢策划广告，一遍一遍地修改方案，甚至是去拍广告，所以抱着这种喜欢的想法进入广告公司，才发现怎么和自己的想象完全不一样？玻璃心彻底碎成了渣。</p><p>通常来说，我想做某事，是让你检视你自己热情的原点，也是验证你是否只是爱表面，而根本不是爱内容这件事。</p><p>所以，如果你还没找到你想做什么，别冒然开始，因为随随便便开始，也会随随便便结束。</p><h6 id="我适合做的"><a href="#我适合做的" class="headerlink" title="我适合做的"></a>我适合做的</h6><p>是基于你现在，毋的基础去做的提升，我已经有了一些画画基础，那要不要去报一个系统的学习班，让自己的爱好提高一个层次。</p><p>这部分更考验你的需求。就是：“你要不要，而不是别人给你的判断和建议”。因为很多的爱好延伸，专业的精进，短期之内是见不到成果的，从早到晚如果你能找到说服自己的理由，那你才会有继续的动力。</p><h6 id="我应该做的"><a href="#我应该做的" class="headerlink" title="我应该做的"></a>我应该做的</h6><p>这种是特别理性客观的分析，我目前的短板是什么？我要不要补齐，这点和减肥类似，它需要你意识到这是你的问题，而且你有足够大的想法去改变。</p><p>换句话说，你已经意识到肥胖对你有影响，而且你的血压、血糖、血脂老到了一个临界点，你必须要减肥了，你也不希望自己年纪轻轻就得上糖尿病，有一这样的想法，你才有可能去开始。</p><h4 id="哪些原因形成“道理都懂，但我就是做不到”"><a href="#哪些原因形成“道理都懂，但我就是做不到”" class="headerlink" title="哪些原因形成“道理都懂，但我就是做不到”"></a>哪些原因形成“道理都懂，但我就是做不到”</h4><p>这个普遍性问题共有六个主要原因。</p><h5 id="1-“懂”和“执行”之间没有必然联系"><a href="#1-“懂”和“执行”之间没有必然联系" class="headerlink" title="1. “懂”和“执行”之间没有必然联系"></a>1. “懂”和“执行”之间没有必然联系</h5><p>导致你行动的，不仅仅是懂。</p><p>在常规意义上和大众心理上，仿佛“懂得了”就等于一定可以做到。</p><p>当我们试图另一个人有所改变的时候，几乎所有用上的方法都是——【劝说】。仿佛只要把对方说通了，把他说明白了，他就能够做出改变了。</p><p>对于【一部分】说出“道理我都懂，但我做不到”的人而言，他们说出这句话某种意义上其实为了传达“你看，道理我明白了，但对我没有什么用，所以不要再试图令我改变了”。</p><p>另一方面，因为人们通常将懂得与执行挂勾，这就会在“知道，但做不到”</p><p>的情况下引发一定程度的焦虑。</p><h5 id="2-你懂的这个道理，可能带给你的结果，并不一定是你真正想要的"><a href="#2-你懂的这个道理，可能带给你的结果，并不一定是你真正想要的" class="headerlink" title="2.你懂的这个道理，可能带给你的结果，并不一定是你真正想要的"></a>2.你懂的这个道理，可能带给你的结果，并不一定是你真正想要的</h5><p>有非常多的人焦虑和痛苦是出于一种：笼统的渴望“变得更优秀”，“变得更好”之类，或是由于对别人的羡慕而将一些道理与方法套用在自己身上，但始终达不到目标所导致。</p><p>还有一些人是由于幼年时期被父母，老师，其他长辈给予很多高标准的评价和要求，导致其形成了一种会过度乞求完美和理想化的自我倾向。</p><p>比如，有许多出于考研阶段的人都非常的焦虑，一方面知道自己应该静下心来好好学习，另一方面，又总是会在该学习的时候不停地玩手机，刷微信刷微博浪费时间，日子一天天过去，内心也越来越着急，但行动却永远跟不上。于是他们就完全被焦虑和恐慌裹挟着，却从不能停下来想一想：我之所以考研其实会不会为了逃避找工作的压力？我之所以考研是不是只是想有个好大学研究生的名言、给自己镀一层金？我之所以考研会不会、只是父母的安排，而并不是我想要的。</p><h5 id="3-懂仅仅是止于理解"><a href="#3-懂仅仅是止于理解" class="headerlink" title="3. 懂仅仅是止于理解"></a>3. 懂仅仅是止于理解</h5><p>理解只是“理智性领悟”的开始，你还需要达到“情感性领悟”或称“有效性领悟”，尽管你在理智层面上“知道”了，但你的内心其实坚定相信的，还是之前的那种认知。</p><p>人类拥有理性，但问题在于，为我们做事情提供动力的并不是理智，而是情绪、情感、激情、憧憬等等……这些“感性”层面的要素。</p><p>所以从某种意义上讲，我们由分裂的两部分组成，理智与情感这两个部分时常会出现冲突。</p><p>比如非常多的人都在渴望着成功，这世上有非常多的人励志书籍在鼓励着人们去追求成功，也有不少的方法论告诉你怎样达到成功。</p><p>但不管你理智层面对成功多么的渴望，不管你多么清楚达到成功的步骤，但如果你无法发自内心的热爱这份事业，如果你不能在感性层面上对你所要做的事情充满激情，那么你毫无疑问会陷入懈怠和拖延，最终什么都做不了。</p><h5 id="4-喜欢舒适区"><a href="#4-喜欢舒适区" class="headerlink" title="4. 喜欢舒适区"></a>4. 喜欢舒适区</h5><p>知道了一个新的道理，想要达到一个新的改变，往往意味着你要跳出自己的舒适区，要经受一定程度的痛苦。</p><p>可我们不愿付出努力，不想承受痛苦，只想一觉醒来之后自己自动就改变了，只想着某一个未来的自己忽然就不再拖延了，只会一味地幻想自己年终的业绩，忽然就提到公司第一了。</p><p>但我们只会想，唑用幻想去满足自己，缓解焦虑，而很难在行动的层面付出任何有效的努力。</p><p>比如：“我知道我应该离开这个不爱我的男人，可我就是做不到”。</p><p>事实上并没有人拿着刀架在她的脖子上，告诉她要是离开这个男人我就砍死你，所以“可我就是做不到”这种说法本身就是一种逃避。</p><h5 id="5-人类本能的短视"><a href="#5-人类本能的短视" class="headerlink" title="5.人类本能的短视"></a>5.人类本能的短视</h5><p>事实上，一个月后，甚至一周后的自己，对我们而言都相当是“别人”，我们并不会在乎一周后没完成任务，没完成计划的那个你会有多痛苦。</p><p>你想到的是，只要“现在”自己爽，能够轻松就足够了，反正一周后的痛苦、挨骂、自责又不是“现在”的自己来承受。</p><h5 id="6-你懂的道理与你自身的认知系统和思维习惯存在着冲突"><a href="#6-你懂的道理与你自身的认知系统和思维习惯存在着冲突" class="headerlink" title="6.你懂的道理与你自身的认知系统和思维习惯存在着冲突"></a>6.你懂的道理与你自身的认知系统和思维习惯存在着冲突</h5><p>例如：“我知道你说的都是对的，但我还是无法接受”。</p><p>人的认知系统是一个逻辑严密、不同部分之间有着紧密联系的系统，但同时我们的许多谁知习惯和行为习惯，由于长期积累而各自为政。</p><p>没有一个标准让我们区分，没有一个标准供我们参考，我们无法做出拥有安全感的选择。但是，评判的标准太多，甚至几乎每一个人的评判标准都不一样，所以你会感到无所适从，你也无法确定哪一个选择对你更好，所以你就停留在犹豫和迟疑当中。</p><h4 id="如何做到知行合一"><a href="#如何做到知行合一" class="headerlink" title="如何做到知行合一"></a>如何做到知行合一</h4><h5 id="1-清除负面习惯"><a href="#1-清除负面习惯" class="headerlink" title="1. 清除负面习惯"></a>1. 清除负面习惯</h5><p>懒惰、悲观、敌视、依赖别人、极端这些对你阻碍最大的问题，或是与绝大多数道理经验、都不兼容的你自身的一些特点质。这些负面特质会成为你改变的最大阻碍。</p><h5 id="2-主动进行大量的学习与积累，扩大视野，加深洞察力"><a href="#2-主动进行大量的学习与积累，扩大视野，加深洞察力" class="headerlink" title="2. 主动进行大量的学习与积累，扩大视野，加深洞察力"></a>2. 主动进行大量的学习与积累，扩大视野，加深洞察力</h5><p>偏见与顽固的执念，往往是来自无知，不断地扩大知识面和视野，能够让你看待问题的时候，更加深入和全面。</p><h5 id="3-将自己调整到易于新知识的状态，建立开放式心态"><a href="#3-将自己调整到易于新知识的状态，建立开放式心态" class="headerlink" title="3. 将自己调整到易于新知识的状态，建立开放式心态"></a>3. 将自己调整到易于新知识的状态，建立开放式心态</h5><h5 id="4-逐渐地培养自己理智、主动的习惯"><a href="#4-逐渐地培养自己理智、主动的习惯" class="headerlink" title="4. 逐渐地培养自己理智、主动的习惯"></a>4. 逐渐地培养自己理智、主动的习惯</h5><h5 id="5-制定可执行计划"><a href="#5-制定可执行计划" class="headerlink" title="5. 制定可执行计划"></a>5. 制定可执行计划</h5><p>“具备可执行性”意味着你的计划是有效的。</p><p>没有可执行性的计划会让人丧气。</p><h5 id="6-持续练习，令新的观念逐渐替代旧的观念，新的行动逐渐代替旧的行动"><a href="#6-持续练习，令新的观念逐渐替代旧的观念，新的行动逐渐代替旧的行动" class="headerlink" title="6. 持续练习，令新的观念逐渐替代旧的观念，新的行动逐渐代替旧的行动"></a>6. 持续练习，令新的观念逐渐替代旧的观念，新的行动逐渐代替旧的行动</h5><p>持续的坚持才能带来深入扎实的改变。不仅是行动，包括认知习惯，也需要你有意识的自我提醒与矫正。</p><h4 id="什么才会让你改变"><a href="#什么才会让你改变" class="headerlink" title="什么才会让你改变"></a>什么才会让你改变</h4><p>经历。</p><p>只有自身的经历，才能够给予你最真实、最全面的感受和体会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 知易行难释义：&lt;/p&gt;
&lt;p&gt; “知道应该做什么”很容易，但“实际上怎么做”却不一定是对的。因为行，并不是由知驱动的。“知道应该做什么”和“想做什么”是两码事，而后者才是起决定性作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经常有人说：“道理
      
    
    </summary>
    
      <category term="为人处世" scheme="https://lqq-smile.github.io/categories/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%B8%96/"/>
    
    
      <category term="知易行难" scheme="https://lqq-smile.github.io/tags/%E7%9F%A5%E6%98%93%E8%A1%8C%E9%9A%BE/"/>
    
      <category term="执行力" scheme="https://lqq-smile.github.io/tags/%E6%89%A7%E8%A1%8C%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>性能改进方案</title>
    <link href="https://lqq-smile.github.io/2018/06/21/%E6%9F%A5%E7%9C%8B%E6%80%A7%E8%83%BD%E6%94%B9%E8%BF%9B%E6%96%B9%E6%A1%88/"/>
    <id>https://lqq-smile.github.io/2018/06/21/查看性能改进方案/</id>
    <published>2018-06-21T13:46:00.000Z</published>
    <updated>2018-06-21T14:30:54.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h1><h2 id="目前查重功能的主要问题"><a href="#目前查重功能的主要问题" class="headerlink" title="目前查重功能的主要问题"></a>目前查重功能的主要问题</h2><p>目前系统的查重功能只用在立项表单的提交功能上。当立项功能提交时触发查重检查。由于查重算法本身性能不是很快，在文档有1000多个时耗时大概5秒多；如果文档数量增加，耗时只会更多。</p><h2 id="文档的要点"><a href="#文档的要点" class="headerlink" title="文档的要点"></a>文档的要点</h2><p>本文档主要讨论双创查重模块性能改进的方式方法。核心目标是改善用户体验。我们也许最终没有加快查重算法的性能，但是，我们的目标是改善用户的体验。使用户在使用过程中不会有不舒服的情绪。</p><h1 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h1><p>本文档讨论话题如下：</p><blockquote><ul><li>预先触发</li><li>支持增量数据</li><li>保存运行结果</li><li>改进运行节点</li><li>多节点运行</li></ul></blockquote><h1 id="支持增量数据"><a href="#支持增量数据" class="headerlink" title="支持增量数据"></a>支持增量数据</h1><p>目前的程序不支持增量查重数据，这意味着新通过的成果推广或者立项无法作为参考依据。可改进程序，支持增量数据写入缓存。</p><h2 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h2><h3 id="立项"><a href="#立项" class="headerlink" title="立项"></a>立项</h3><blockquote><p><strong>1、立项通过后，添加到文档查重缓存中</strong><br><strong>2、立项删除后，从文档查重缓存中删除（如果有）</strong><br><strong>3、通过状态的立项修改后，重新加载到缓存（如果有）</strong></p></blockquote><h3 id="成果推广"><a href="#成果推广" class="headerlink" title="成果推广"></a>成果推广</h3><blockquote><p><strong>1、成果推广通过后，添加到文档查重缓存中</strong><br><strong>2、成果推广删除后，从文档查重缓存中删除（如果有）</strong><br><strong>3、通过状态的成果推广修改后，重新加载到缓存（如果有）</strong></p></blockquote><h1 id="性能改进点"><a href="#性能改进点" class="headerlink" title="性能改进点"></a>性能改进点</h1><p>为了提升用户的体验，加快文档查重对比结果的输出可以在如下几点入手：</p><h2 id="预先触发"><a href="#预先触发" class="headerlink" title="预先触发"></a>预先触发</h2><p> 目前触发检查的点是立项提交时同时运行查重的程序。一般用户需要等待4-5秒的时间。那么，在提交之前预先触发检查可以减少用户等待或者免于用户等待。</p><h3 id="预先触发的方案"><a href="#预先触发的方案" class="headerlink" title="预先触发的方案"></a>预先触发的方案</h3><h4 id="方案一-在立项的表单页面添加“对比”按钮。"><a href="#方案一-在立项的表单页面添加“对比”按钮。" class="headerlink" title="方案一 在立项的表单页面添加“对比”按钮。"></a>方案一 在立项的表单页面添加“对比”按钮。</h4><h5 id="添加方式说明"><a href="#添加方式说明" class="headerlink" title="添加方式说明"></a>添加方式说明</h5><blockquote><p>在立项表单页添加对比按钮。当用户填写完项目论证信息后，可以点击对比按钮。那么系统将在后台触发查重检查操作。</p></blockquote><h5 id="解决用户点击“对比”后再修改数据的问题"><a href="#解决用户点击“对比”后再修改数据的问题" class="headerlink" title="解决用户点击“对比”后再修改数据的问题"></a>解决用户点击“对比”后再修改数据的问题</h5><blockquote><p>如果用户在点击完“对比”后发现先前填写的数据需要修改呢？</p></blockquote><p>用户返回修改数据是无法避免的问题。<br>如果用户修改了项目论证中的数据，只能再次触发查重。这里涉及到两个问题：</p><blockquote><ol><li>如果之前的查重任务还没有完成，我们应该采取什么样的操作？</li><li>如果多次触发查重，是否会带来系统多重任务造成性能问题？</li></ol></blockquote><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h6><p>由于页面提供了预先触发的功能，那么重复提交查重功能是无法避免的。但是，重复提交查重请求不代表我们一定会执行。由于我们后台的查重任务是分页抽取文档数据执行算法的，我们可以对同一个立项设置一个任务id,后面的提交请求执行前可以先检查是否正在对同一个立项执行查重任务。如果有，我们可以设置下一个分页任务不再执行，而重新开始新的查重任务。</p><h4 id="方案二-不添加“对比按钮”-自动执行查重任务"><a href="#方案二-不添加“对比按钮”-自动执行查重任务" class="headerlink" title="方案二 不添加“对比按钮”,自动执行查重任务"></a>方案二 不添加“对比按钮”,自动执行查重任务</h4><blockquote><p>当用户填写完一个项目论证项后，自动对该填写触发检查<br><strong>说明：</strong><br>1、用户在填写项目论证时，每一个框填写的文字都是比较多的，这意味着每一项的填写都是需要花费至少一分钟的时间；<br>2、基于上一点，如果用户填写第一项时，再填写第二项时，自动触发对第一项的查重检查，并不会影响用户，因为用户通常在第二项没有填写完成时第一项的查重结果就返回来了；<br>3、由于项目论证下面还有需要用户填写的内容，所以当用户填写完项目论证以后，通常可以继续正常填写下面的内容。所有查重结果返回后，用户并不会感觉系统已经提前完成了查重的任务；<br>4、用户在提交时，系统已经完成了所有项目论证的查重工作，所以用户不会等待查重结果返回。</p></blockquote><h5 id="用户返回修改项目论证的数据"><a href="#用户返回修改项目论证的数据" class="headerlink" title="用户返回修改项目论证的数据"></a>用户返回修改项目论证的数据</h5><p>与方案一一样，用户同样有可能返回修改先前填写的数据。这时解决思路是一样的。我们可以设置一个查重任务id，当同一个查重数据到来时，先前的任务如果还没有结束，可以提前让它结束；从而开始执行当前查重任务。</p><h2 id="保存对比结果"><a href="#保存对比结果" class="headerlink" title="保存对比结果"></a>保存对比结果</h2><p>由于目前的设计不保存检查的结果，那么当工单进入专家审核环节时，必须再次触发检查，这样的检查没有意义。保存检查的结果可以减少查重的次数。</p><h3 id="保存方案的设计原则"><a href="#保存方案的设计原则" class="headerlink" title="保存方案的设计原则"></a>保存方案的设计原则</h3><blockquote><p>查重的数据应该独立于业务模块<br>查重应该是一个独立的公用模块<br>查重模块的代码和数据表应独立于业务模块（代码目前是独立的模块）<br>查重模块的代码应该可以方便抽取成为微服务<br>数据表设计尽量简单，避免复杂</p></blockquote><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>查重的表是独立的模块，但是，它还是要保存少量的业务数据。比如业务id和业务类型（随意自定义）。</p><div class="table-container"><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">中文名字</th><th style="text-align:center">类型</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">id的值</td><td style="text-align:center">varchar2</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">business_id</td><td style="text-align:center">业务id</td><td style="text-align:center">varchar2</td><td style="text-align:left">32位，与业务类型组成复合主键</td></tr><tr><td style="text-align:center">business_type</td><td style="text-align:center">业务类型</td><td style="text-align:center">varchar2</td><td style="text-align:left">自定义相应的类型</td></tr><tr><td style="text-align:center">hash</td><td style="text-align:center">哈希值</td><td style="text-align:center">varchar2</td><td style="text-align:left">对应内容的哈希值，不需要直接保存原始内容值，只需要保存哈希，以此检测内容是否改变过</td></tr><tr><td style="text-align:center">create_time</td><td style="text-align:center">保存时间</td><td style="text-align:center">date</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">state</td><td style="text-align:center">状态</td><td style="text-align:center">varchar2</td><td style="text-align:left">1运行查重中 2 查重结束</td></tr><tr><td style="text-align:center">result_state</td><td style="text-align:center">是否存在可能重复的文档</td><td style="text-align:center">varchar2</td><td style="text-align:left">1存在 2 不存在</td></tr><tr><td style="text-align:center">result</td><td style="text-align:center">查重结果</td><td style="text-align:center">clob</td><td style="text-align:left">如果触发前检查发现hash值没有发生变化，直接返回该字段结果</td></tr></tbody></table></div><h3 id="逻辑说明"><a href="#逻辑说明" class="headerlink" title="逻辑说明"></a>逻辑说明</h3><blockquote><p>1、业务模块创建一个查重任务。</p><blockquote><p> 参数：<br> 业务id 业务类型 查重内容</p></blockquote><p>2、检查该业务查重任务是否正在运行</p><blockquote><p>如果正在运行，则提前结束该任务（禁止下一个分页的查重，标志必须结束任务）<br>执行该查重任务</p></blockquote><p>3、返回查重结果。查重结果可以立即显示也可以先缓存，在需要的时候再显示。<br>4、一个业务类型可能查重的触发次数不止一次。当下一次触发时，如果检查hash的结果与先前一致，不必触发查重任务，只需要返回先前查重的结果。<br>5、修改查重状态。</p></blockquote><h2 id="改进运行节点"><a href="#改进运行节点" class="headerlink" title="改进运行节点"></a>改进运行节点</h2><p>由于查重算法比较耗系统的资源，可以将查重任务转移到其他模块独立运行：</p><blockquote><p>转换到BPP模块。<br>设置独立的微服务模块。并多节点运行。这个方案受限于系统的硬件资源情况。</p></blockquote><h2 id="多节点运行"><a href="#多节点运行" class="headerlink" title="多节点运行"></a>多节点运行</h2><p>多节点可以将查重的数据量N倍减少。可以大大提升效率，但对资源比较敏感。由于正式环境节点数量和开发难度的问题，目前这个方案可以作为备选方案。</p><h3 id="多节点运行方案（草稿）"><a href="#多节点运行方案（草稿）" class="headerlink" title="多节点运行方案（草稿）"></a>多节点运行方案（草稿）</h3><blockquote><p>1、接到任务的节点成为查重任务的管理者和协调者（NameNode）<br>2、管理者根据文档总数量确定各节点任务，向各节点（taskNode,也可以是它自身）发送任务<br>3、任务的参数为查重的内容和分页的游标，文档数量<br>4、NameNode等待各节点返回各自的查重结果<br>5、所有taskNode返回查重结果后，NameNode合并结果，排序，生成最后结果<br>6、任何一个节点运行出错或者没有返回，该查重任务失败。（没有必要设计复杂的容错能力）</p></blockquote><h2 id="延时处理"><a href="#延时处理" class="headerlink" title="延时处理"></a>延时处理</h2><p>性能改进的另一种思路是使用消息队列延时处理查重任务。但目前系统要求查重不能延时处理，因此这个方案可以作为备选。</p><h3 id="延时处理概念方案"><a href="#延时处理概念方案" class="headerlink" title="延时处理概念方案"></a>延时处理概念方案</h3><blockquote><p>1、确定延时通知方案（短信、站内信、其他通知手段）<br>2、设计延时提交方案。（可以设置工单必须等待查重任务结束后才可以实质提交（系统自动提交），如果有重复内容，需要用户手动确认）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h1&gt;&lt;h2 id=&quot;目前查重功能的主要问题&quot;&gt;&lt;a href=&quot;#目前查重功能的主要问题&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="架构方案" scheme="https://lqq-smile.github.io/categories/%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="性能" scheme="https://lqq-smile.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>线性回归数学推导</title>
    <link href="https://lqq-smile.github.io/2018/06/20/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC/"/>
    <id>https://lqq-smile.github.io/2018/06/20/线性回归数学推导/</id>
    <published>2018-06-20T14:44:10.000Z</published>
    <updated>2018-06-20T15:53:03.420Z</updated>
    
    <content type="html"><![CDATA[<p>由样本数据，设</p><script type="math/tex; mode=display">y=\theta X+\epsilon</script><p>其中，y为真实值，X为原始数据矩阵，$\theta$ 为我们要求的最佳拟合参数向量。$\epsilon$ 为误差值。由于$\epsilon$ 符合正态分布，所以某一数据出现的概率为：</p><script type="math/tex; mode=display">P(y^i|x^i;\theta)={1\over{\sqrt{2\pi}\sigma}}exp(-{\epsilon^2 \over 2\sigma^2})={1\over{\sqrt{2\pi}\sigma}}exp(-{(y^i-\theta^Tx^i)^2 \over 2\sigma^2})</script><p>似然函数</p><p>我们要得到出现样本数据这个结果的概率，由联合概率公式：</p><script type="math/tex; mode=display">L(\theta)=\prod_{i=1}^m P(y^i|x^i;\theta)=\prod_{i=1}^m{1\over{\sqrt{2\pi}\sigma}}exp(-{(y^i-\theta^Tx^i)^2 \over 2\sigma^2})</script><p>取对数似然：</p><script type="math/tex; mode=display">ln(L(\theta))=ln(\prod_{i=1}^m{1\over{\sqrt{2\pi}\sigma}}exp(-{(y^i-\theta^Tx^i)^2 \over 2\sigma^2}))</script><p>由对数公式，得：</p><script type="math/tex; mode=display">ln(L(\theta))=\sum_{i=1}^m ln({1\over{\sqrt{2\pi}\sigma}}exp(-{(y^i-\theta^Tx^i)^2 \over 2\sigma^2})) \\=m*ln({1\over{\sqrt{2\pi}\sigma}})-{1\over{\sigma^2}}*{1\over 2}*\sum_{i=1}^m(y^i-\theta^Tx^i)^2</script><p>上面这个式子，前面一部分是正数，方差是已知的，于是我们只要求后面的目标函数。只要目标函数越大，似然函数就越小。</p><p>目标函数</p><script type="math/tex; mode=display">J(\theta)={1\over 2}\sum_{i=1}^m (h_\theta(x^i)-y^i)^2={1\over2}(X\theta-y)^T(X\theta-y)</script><p>求偏导：</p><script type="math/tex; mode=display">\Delta_\theta J(\theta)=\Delta_\theta({1\over2}(X\theta-y)^T(X\theta-y))=\Delta_\theta({1\over2}(\theta^TX^T-y^T)(X\theta-y)) \\=\Delta_\theta({1\over2}(\theta^TX^TX\theta-\theta^TX^Ty-y^TX\theta+y^Ty)) \\={1\over2}(2X^TX\theta-X^Ty-(y^TX)^T) \\=X^TX\theta-X^Ty</script><p>令上面的偏导为0,得：</p><script type="math/tex; mode=display">\theta=(X^TX)^{-1}X^Ty</script><p>通过已知的数据集，我们可以通过上面的公式求得参数向量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由样本数据，设&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
y=\theta X+\epsilon&lt;/script&gt;&lt;p&gt;其中，y为真实值，X为原始数据矩阵，$\theta$ 为我们要求的最佳拟合参数向量。$\epsilon$ 为误
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="线性回归" scheme="https://lqq-smile.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="机器学习" scheme="https://lqq-smile.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>新立项开发方案讨论</title>
    <link href="https://lqq-smile.github.io/2018/06/20/%E6%96%B0%E7%AB%8B%E9%A1%B9%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88%E8%AE%A8%E8%AE%BA/"/>
    <id>https://lqq-smile.github.io/2018/06/20/新立项开发方案讨论/</id>
    <published>2018-06-20T10:28:12.000Z</published>
    <updated>2018-06-20T12:50:00.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h3><h4 id="文档目标"><a href="#文档目标" class="headerlink" title="文档目标"></a>文档目标</h4><p>本文档针对新立项的开发需求，讨论开发模式与建表技术方案。本文档具有文档作者的某些倾向性认同方案。希望其他同事不受文档作者倾向性的影响，提出不同的意见，便于制订最佳方案。</p><h4 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h4><div class="table-container"><table><thead><tr><th style="text-align:center">文档作者</th><th style="text-align:center">更新日期</th><th style="text-align:left">更新信息</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">李清泉</td><td style="text-align:center">2018-06-16</td><td style="text-align:left">新文档撰写</td><td style="text-align:left">本方案是草稿方案</td></tr></tbody></table></div><h3 id="建表方案讨论"><a href="#建表方案讨论" class="headerlink" title="建表方案讨论"></a>建表方案讨论</h3><p>新的立项与云南立项的字段大同小异，这里有两种建表方式：</p><blockquote><ol><li>在原有立项表结构基础上，增加一些字段。</li><li>全新建表。</li></ol></blockquote><p>下面详细论述这两套方案的优缺点。</p><h4 id="在原有立项表结构基础建表"><a href="#在原有立项表结构基础建表" class="headerlink" title="在原有立项表结构基础建表"></a>在原有立项表结构基础建表</h4><p>广东的立项的表单与原来云南立项的表单大同小异。我们当然可以共用原来的表结构，在原来的基础上做一些拓展。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>减少数据库的复杂度。这样建表的目标是在业务上我们将广东的立项跟原来的立项不做区分，我们认为广东的立项只是原来业务基础上新增加的需求。模块是一样的。</li><li>方便做统计功能。如果采用两套不同的表，做统计时只能使用union all的方式，SQL语句比较复杂。</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>必须修改原来的代码逻辑，风险高。</li><li>业务逻辑耦合度高，区分复杂，不利于以后的业务扩展。</li><li>不利于新员工学习理解。</li></ol><h4 id="全新建表"><a href="#全新建表" class="headerlink" title="全新建表"></a>全新建表</h4><p>全新建表，就是这次的广东立项需求我们建一套完全全新的表体系，数据跟之前的数据完全不混合。</p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol><li>代码、业务耦合度低。我们可以将这次的需求理解成为一个全新的业务模块，完全不受之前立项模块的影响，从新写代码。</li><li>不需要对原来模块的代码做任何修改，风险低。</li><li>以后如果有立项的需求，可以完全按现有的方式开发，扩展性强。</li><li>有利于新员工的学习。业务、代码的耦合会让新人理解起来麻烦。</li><li>不同地区的数据分开存储，性能有一定提升。</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>表的数量多，增加数据库复杂度。</li><li>增加建表工作量。</li><li>做统计功能时，如果涉及到所有立项的数据，必须使用union 语句，SQL语句复杂度高。</li></ol><h3 id="开发模式讨论"><a href="#开发模式讨论" class="headerlink" title="开发模式讨论"></a>开发模式讨论</h3><p>新立项的开发模式和设计上，有两种方案可以选择：</p><blockquote><ol><li>使用微服务模式。</li><li>在双创现有代码上，增加一个模块。</li></ol></blockquote><p>下面讨论一下这两种方案的区别和优缺点。</p><h4 id="微服务开发模式"><a href="#微服务开发模式" class="headerlink" title="微服务开发模式"></a>微服务开发模式</h4><p>微服务的开发模块就是我们按照新框架的开发规范，新增加一个微服务，在这个微服务模块上开发新的广东立项的逻辑。</p><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ol><li>给我们开发人员实践新框架的机会，加快开发人员熟悉新框架开发规范。</li><li>完全体现了新框架的优势：扩展性强，可维护性强，代码耦合度低。</li><li>有利于新员工理解。</li><li>运维方便。广东立项版本发布不受大版本旧系统的影响。</li></ol><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ol><li>新框架的开发模式还没有在开发人员身上理解深刻，上线新框架的开发模式有些仓促。</li><li>搭建框架需要一定的时间，有风险。</li><li>正式环境还没有准备好全面新框架的上线条件，存在风险。</li><li>客户还没有同意这种全新的部署方式。</li><li>需要跟进硬件资源。</li><li>运维人员还没有熟悉新框架的运维方式，需要他们有熟悉的过程。存在一定风险因素。</li></ol><h4 id="原有系统新增模块"><a href="#原有系统新增模块" class="headerlink" title="原有系统新增模块"></a>原有系统新增模块</h4><p>原有双创项目上新增模块，就是按照以前的开发模式，采用保守的方法，新增一个代码模块进行开发。</p><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ol><li>按照大家熟悉的模式进行开发，风险低。</li><li>框架没有发生改变，旧的标签都可以一样使用，不需要另外产生开发工作量。</li><li>不产生接口工作量。</li><li>不需要考虑客户部署申请等工作要求。</li></ol><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ol><li>该方案过于保守。即使在新框架开发接近可使用的基础上，仍然使用原有的开发模式。</li><li>不利于开发人员熟悉新框架的开发模式。损失了一次锻炼的机会。</li><li>不能体现出新框架的优势。</li></ol><h4 id="考虑方式"><a href="#考虑方式" class="headerlink" title="考虑方式"></a>考虑方式</h4><ol><li>对风险的评估。特别是对开发时间的评估，采用微服务的开发模式的工作量要超过采用增加新模块的开发模式。但不会超过很多。</li><li>广东立项模块的重要程度。</li><li>如果采用新框架微服务的开发模式，要求事先有合理的风险回避方案。</li></ol><h3 id="采用微服务开发模式的风险回避方案"><a href="#采用微服务开发模式的风险回避方案" class="headerlink" title="采用微服务开发模式的风险回避方案"></a>采用微服务开发模式的风险回避方案</h3><p>采用新框架的开发模式，会产生更高的风险，我认为可以考虑以下的点：</p><blockquote><ol><li>对新框架开发模式工作量和大家的适应时间应作出合理的评估</li><li>在采用微服务开发模式的情况下，如果出现风险，应该如何解决？</li><li>结合两种开发模式回避风险</li></ol></blockquote><h4 id="作出合理的评估"><a href="#作出合理的评估" class="headerlink" title="作出合理的评估"></a>作出合理的评估</h4><p>大家应充分发表意见。充分列出可能产生风险的地方，以方便大家对可能出现的问题有合理的预防和评估。</p><h4 id="有合理的回避风险的方法"><a href="#有合理的回避风险的方法" class="headerlink" title="有合理的回避风险的方法"></a>有合理的回避风险的方法</h4><p>比如以下的方法有助于解决困境：</p><ol><li>如果三天新框架不能正常跑起来，应放弃采用新框架的开发模式，回归原来的开发模式。</li><li>大家不能适应新框架开发模式时，应回归原来的开发模式。</li><li>大家发现新框架的开发模式明显增加工作量且无法解决，影响到新版本发布时，应该放弃这种开发模式。</li></ol><h4 id="结合两种开发模式"><a href="#结合两种开发模式" class="headerlink" title="结合两种开发模式"></a>结合两种开发模式</h4><p>我认为两种开发模式并不是完全冲突且不能有任何兼容的。以下方法是回避风险的有效方法：</p><ol><li>在搭建新的微服务模块的同时，其他开发人员可以在原有的系统上新增模块采用原有的模式写代码。</li><li>新框架如果可以顺利搭建，将代码从旧系统上复制过来并按照新框架模式进行开发。</li><li>同样，采用新模式遇到不可解决的风险时，也可以将业务代码复制到原有的系统继续开发。</li><li>开发模块，大家应注意尽量不要耦合其他模块的业务代码，造成分割困难。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文档说明&quot;&gt;&lt;a href=&quot;#文档说明&quot; class=&quot;headerlink&quot; title=&quot;文档说明&quot;&gt;&lt;/a&gt;文档说明&lt;/h3&gt;&lt;h4 id=&quot;文档目标&quot;&gt;&lt;a href=&quot;#文档目标&quot; class=&quot;headerlink&quot; title=&quot;文档目标&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="架构方案" scheme="https://lqq-smile.github.io/categories/%E6%9E%B6%E6%9E%84%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="方案讨论" scheme="https://lqq-smile.github.io/tags/%E6%96%B9%E6%A1%88%E8%AE%A8%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>K近邻算法详解</title>
    <link href="https://lqq-smile.github.io/2018/06/19/K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://lqq-smile.github.io/2018/06/19/K近邻算法详解/</id>
    <published>2018-06-19T14:46:23.000Z</published>
    <updated>2018-06-20T13:12:52.049Z</updated>
    
    <content type="html"><![CDATA[<p>本文打算简单介绍K近邻算法。不展开论述。</p><h3 id="K近邻算法概述"><a href="#K近邻算法概述" class="headerlink" title="K近邻算法概述"></a>K近邻算法概述</h3><blockquote><p>举个例子：</p><p>如果你想知道170厘米身高的人体重是多少。最好的办法是不是从一堆人当中找到几个身高最接近170厘米的人，称出他们的体重然后算平均值呢？</p></blockquote><p>事实上，K近邻就是这样简单。所谓“K”，就是找最接近估算值的K个元素然后算平均值。</p><p>设我们有一堆数据：</p><div class="table-container"><table><thead><tr><th>性别</th><th>身高</th><th>胖瘦(目测)</th><th>体重</th></tr></thead><tbody><tr><td>男</td><td>171</td><td>胖</td><td>65</td></tr><tr><td>女</td><td>167</td><td>瘦</td><td>59</td></tr><tr><td>男</td><td>170</td><td>瘦</td><td>63</td></tr></tbody></table></div><p>现在我们要估测下面一个人的体重：男，169，胖。怎么测呢？我们如果只看身高，女生也有170的人，但明显女生的数据不太符合我们的要求，还有胖瘦也应该符合要预测的数据才行。所以，我们应该用N维的近邻估测。即ML-KNN。</p><h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><p>这里必须先介绍数据标准化的概念。上面的数据，性别只有男女，即可以改为1，0，胖瘦也是一样，而身高变化的范围却很大。当我们使用算法时某一些字段可能影响过大而造成“不公平”。设$\mu$ 为某字段的均值，$\sigma$ 为对应标准差，数据标准化的公式为：</p><script type="math/tex; mode=display">{ {x- \mu} \over \sigma}</script><p>数据标准化后，所有字段都会转化为以0为对称中心的数据，消除了比例差异。</p><h3 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h3><p>可以使用欧氏距离计算ML-KNN的多维距离。</p><script type="math/tex; mode=display">d= {1 \over n} \sum_{i=1}^n(p_i-q_i)^2</script><script type="math/tex; mode=display">\sqrt{d}</script><p>其中,p,q为相应两条数据的对应字段。(博客有问题，无法解析根号)</p><h3 id="N维K近邻"><a href="#N维K近邻" class="headerlink" title="N维K近邻"></a>N维K近邻</h3><p>将表格中所有字段进行标准化处理后，再应用欧氏距离公式算出每条样本数据与要估算的数据的值。然后进行排序，找出距离最近的K条数据，然后对这几条数据的体重算平均值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文打算简单介绍K近邻算法。不展开论述。&lt;/p&gt;
&lt;h3 id=&quot;K近邻算法概述&quot;&gt;&lt;a href=&quot;#K近邻算法概述&quot; class=&quot;headerlink&quot; title=&quot;K近邻算法概述&quot;&gt;&lt;/a&gt;K近邻算法概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="-K近邻 -机器学习" scheme="https://lqq-smile.github.io/tags/K%E8%BF%91%E9%82%BB-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>美国是否可能走向独裁</title>
    <link href="https://lqq-smile.github.io/2018/06/18/%E7%BE%8E%E5%9B%BD%E6%98%AF%E5%90%A6%E5%8F%AF%E8%83%BD%E8%B5%B0%E5%90%91%E7%8B%AC%E8%A3%81/"/>
    <id>https://lqq-smile.github.io/2018/06/18/美国是否可能走向独裁/</id>
    <published>2018-06-18T07:58:26.000Z</published>
    <updated>2018-06-18T07:59:43.514Z</updated>
    
    <content type="html"><![CDATA[<p>美国建国已经200多年了，如果美国会走向帝制，为什么直到现在仍然没有这个迹象呢？美国建国之初，所有的政治精英没有一个是希望美国成为帝制国家的，相反，他们非常害怕美国会最终成为一个独裁国家。</p><p>美国建国之初有非常好的民主条件。</p><ul><li>美国是一个“没有历史”的国家，美国人民根本没有根深蒂固的专制思想。</li><li>美国建国之初，各邦互相独立。没有所谓的“中央”。</li><li>美国建国之初，各邦的领导人有思想，有文化，赞成民主。</li><li>各邦领导人希望和平解决大家之间的利益分配问题。最终认同统一的宪法和联邦制。</li></ul><p>政治制度具有稳定性，良性循环的制度最终良性作用于社会。美国人民对美国制度具有高度的认同感，他们最害怕的就是独裁。他们在制度和教育等各方面想尽办法防止政府走向专制：</p><ol><li>国家根本制度采用宪政民主，只有一部宪法。美国人民对法具有高度认同，“人情”处于次要地位。</li><li>国家根本制度是三权分立。没有一个政府官员有权力独裁，也不具有这种可能性。</li><li>军队的指挥权虽然属于总统，但总统不能直接指挥军队。总统只有在国会同意下才有战争权。军队的各级领导人对宪政和国家根本制度高度认同，总统无法指挥军队做出越权的事情。其实，美国总统只有战略的军队指挥权，没有战术的军队指挥权。总统不可能直接命令前线军队的，他只是任免军队的指挥官而已。美国总统发布军事命令时，必须通过参谋长联席会议，美国有一套完整的机制。美国总统只能直接调动海军陆战队，但这些小部队不足以让他独裁。所以，美国总统没有独裁的可能性。</li><li>美国的教育崇尚自由、独立思考，美国人没有官本位思想。官员们也可以正确看待权力，很少有人迷恋权力。美国人并不认为成为政府领导人是一个非常了不起的事情。竞选各级领导的人基本只是为了证明他的能力，很少是因为获得权力。美国官员并不好做，有同样能力的大部分人都没有兴趣。</li></ol><p>这样的国家可能走向专制独裁吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;美国建国已经200多年了，如果美国会走向帝制，为什么直到现在仍然没有这个迹象呢？美国建国之初，所有的政治精英没有一个是希望美国成为帝制国家的，相反，他们非常害怕美国会最终成为一个独裁国家。&lt;/p&gt;
&lt;p&gt;美国建国之初有非常好的民主条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;美国是一个
      
    
    </summary>
    
      <category term="政治历史" scheme="https://lqq-smile.github.io/categories/%E6%94%BF%E6%B2%BB%E5%8E%86%E5%8F%B2/"/>
    
    
      <category term="-美国" scheme="https://lqq-smile.github.io/tags/%E7%BE%8E%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>数据模型设计范式</title>
    <link href="https://lqq-smile.github.io/2018/06/18/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F/"/>
    <id>https://lqq-smile.github.io/2018/06/18/数据模型设计范式/</id>
    <published>2018-06-18T07:57:37.000Z</published>
    <updated>2018-06-18T08:33:20.529Z</updated>
    
    <content type="html"><![CDATA[<p>先讲一个知识：外键一定要建索引。</p><h5 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h5><p>数据表中的任何一个字段都是不可拆分的。不要把多个信息存储在同一个字段之中。</p><h5 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h5><p>请先确定数据表中的决定与被决定关系。比如：医院编号决定了医院名称、类型、地址等。因为知道了编号已经可以唯一确定这些信息了。通过第二范式我们可以拆分出不包含冗余信息的表。</p><p>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是属性完全依赖于主键。</p><p>如果数据表的设计不符合第二范式，一方面会造成数据冗余，另一方面会让数据的更新造成麻烦，因为我们必须同时更新多个地方才可以确保所有包含同一个信息的数据同步。</p><h5 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h5><p>属性不依赖于其它非主属性[消除传递依赖]。</p><p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。</p><blockquote><p><strong>【注意】</strong>不可以因为贪图方便在表中故意放冗余字段</p><p>比如：明知道部门表中已经有了部门名称的字段，但是，为了避免在用户表中联表才可以查询出部门名称，就把部门名称写到了用户表中。这样做好像不需要联表查询了，单表就可以查询出部门名称，但会造成其他问题。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先讲一个知识：外键一定要建索引。&lt;/p&gt;
&lt;h5 id=&quot;第一范式&quot;&gt;&lt;a href=&quot;#第一范式&quot; class=&quot;headerlink&quot; title=&quot;第一范式&quot;&gt;&lt;/a&gt;第一范式&lt;/h5&gt;&lt;p&gt;数据表中的任何一个字段都是不可拆分的。不要把多个信息存储在同一个字段之中。&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://lqq-smile.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据模型" scheme="https://lqq-smile.github.io/tags/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>极大似然函数简单解释</title>
    <link href="https://lqq-smile.github.io/2018/06/11/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>https://lqq-smile.github.io/2018/06/11/极大似然函数简单解释/</id>
    <published>2018-06-11T12:15:26.000Z</published>
    <updated>2018-06-11T13:24:47.452Z</updated>
    
    <content type="html"><![CDATA[<p>极大似然函数花了我好多时间理解。我觉得很有必要写一篇博文解释一下。虽然网上有关的博客很多，但大多数都写得过于复杂，我想解释得简单一些。</p><h2 id="举栗子是最好的方法"><a href="#举栗子是最好的方法" class="headerlink" title="举栗子是最好的方法"></a>举栗子是最好的方法</h2><p><a href="https://www.zhihu.com/question/54082000/answer/137868083" target="_blank" rel="noopener">如何理解似然函数? - 陈琳的回答 - 知乎</a></p><p>引用知乎上这位朋友的回答，再扩展一下。</p><p>我也假设有一个特殊的骰子，不知道有多少面。我们知道一般骰子都是6面，但我这里的骰子面数未知，是特制的。现在我们拿这个骰子抛了1000次，其中我们发现其中“1”的这一面出现了100次。当然按照直觉我们认为这个骰子最有可能是10个面，但是怎么用数学证明出来呢？如果我们经过大量的实验知道了某件事情的结果，想要反过来推测这件事情发生的概率，那么这个推测就称为极大似然估计。</p><p>设这个骰子有N面，所以出现“1”面的概率就是${1 \over N}$。根据联合概率计算公式，发生1000次抛骰子而有100次某个面向上这个结果的概率为：</p><script type="math/tex; mode=display">P=({1 \over N})^{100}  (1-{1\over N})^{900}</script><p>那么，怎么求出N呢？所谓最大似然，是指N最有可能是什么。在这个函数里面，最有可能是不是说对函数P求导，只要求出导数为0那个N值就可以了？当导数为0时我们可以求出P的极值点。即，我们要求P的导数$P’$为0的情况。</p><p>但是，上面那个式子的导数不好求啊，900次方了都。但是，数学家们很聪明，他们发现对幂数函数取对数不会改变函数的单调性。设$y=f(x)$，那么，$ln(f(x))$的单调性与$f(x)$的单调性一样。即：$f’(x)$与$(ln(f(x)))’$的极值点是一样的。</p><p>于是，我们对P取对数：</p><script type="math/tex; mode=display">ln(P)=ln(({1 \over N})^{100}  (1-{1\over N})^{900})=100ln{1\over N}+900ln(1-{1\over N})</script><p>对数公式就不解释啦，这个可以百度。对数真是一个神奇的东西，可以把这么复杂的幂函数化简成这个样子。补充数学公式：</p><blockquote><ol><li><p>$ln(ab)=lna+lnb$</p></li><li><p>$ln(a^b)=blna$</p></li><li><p>$(lnx)’={1\over x}$</p></li><li><p>$(x^n)’=nx^{n-1}$</p></li><li><p>复合函数$f(g(x))$的导数为：</p><script type="math/tex; mode=display">f'(g(x))=g'(x)*f'(g(x))</script></li></ol></blockquote><p>所以：</p><script type="math/tex; mode=display">(ln(P))'=(100ln{1\over N}+900ln(1-{1\over N}))'=100*N*-1*{1\over N^2}+900*{N\over {N-1}}*{1\over N^2}</script><script type="math/tex; mode=display">(ln(P))'=900({1\over {N(N-1)}})-100{1\over N}</script><p>令$(ln(P))’=0$，得：</p><script type="math/tex; mode=display">900({1\over {N(N-1)}})=100{1\over N}</script><p>即：</p><script type="math/tex; mode=display">900{1\over{N-1}}=100</script><p>这是初中的方程哦，我们可以得出：</p><script type="math/tex; mode=display">N=10</script><p>所以，这个骰子最有可能有10个面。问题得解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;极大似然函数花了我好多时间理解。我觉得很有必要写一篇博文解释一下。虽然网上有关的博客很多，但大多数都写得过于复杂，我想解释得简单一些。&lt;/p&gt;
&lt;h2 id=&quot;举栗子是最好的方法&quot;&gt;&lt;a href=&quot;#举栗子是最好的方法&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="极大似然" scheme="https://lqq-smile.github.io/tags/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6/"/>
    
  </entry>
  
  <entry>
    <title>第一阶段总结与承诺</title>
    <link href="https://lqq-smile.github.io/2018/06/10/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%BF%E8%AF%BA/"/>
    <id>https://lqq-smile.github.io/2018/06/10/第一阶段总结与承诺/</id>
    <published>2018-06-10T10:44:02.000Z</published>
    <updated>2018-06-10T12:05:10.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一阶段总结"><a href="#第一阶段总结" class="headerlink" title="第一阶段总结"></a>第一阶段总结</h3><p>其实，我对我们个人敏捷的关注度不是很高。最近我忙于技术进修，对于个人敏捷的活动并不是非常关注，只是在交作业的时候做一下。还有一次班长要求我做录音讲解，那一次我是比较认真的。</p><p>我觉得我这样子主要是两方面的原因：</p><h4 id="我这次进修很重要，需要投入100-的精力"><a href="#我这次进修很重要，需要投入100-的精力" class="headerlink" title="我这次进修很重要，需要投入100%的精力"></a>我这次进修很重要，需要投入100%的精力</h4><p>我出来工作有好几年了，年龄大了以后就开始有各种想法，之前对于自己的了解不够，尝试过做管理，尝试过其他行业。后来终于发现自己其实还是喜欢技术，我是一个希望用技术改变世界的人。</p><p>我觉得我现在从事的技术工作对社会改变很有限，AI大热以后，我感觉人工智能可以改变世界，于是我现在一心投入到其中进行学习了。</p><p>人工智能需要的数学知识比较多，入门门槛很高，所以我真的有些顾不上我们的个人敏捷活动了。但是，我还是花时间留意大家的行动，从周老师的课程也获知到，自我管理是个人技能的重要维度，我不能退出个人敏捷的学习。只是暂时可能不能作为重点关注了。</p><h4 id="我之前认真研究过心理学，个人敏捷的理论跟我之前的学习有一定的重叠之处"><a href="#我之前认真研究过心理学，个人敏捷的理论跟我之前的学习有一定的重叠之处" class="headerlink" title="我之前认真研究过心理学，个人敏捷的理论跟我之前的学习有一定的重叠之处"></a>我之前认真研究过心理学，个人敏捷的理论跟我之前的学习有一定的重叠之处</h4><p>在加入个人敏捷之前，因为个人人际关系不和谐等各种原因，我曾经花了很多时间研究人际关系、心理学、情商等知识。加入个人敏捷群后，我发现个人敏捷的许多内容跟我之前研究的内容有重叠之处。所以，在这一点上说，我确实对我们的活动有一点放松。但是，我对个人敏捷是非常重视的。我会认真思考我们个人敏捷里面的每一个活动。</p><p>我们的第二阶段的内容主要是情绪管理。这也是我非常重视和乐于参与的内容。</p><p>之前，我的人际关系紧张，主要是自我情绪管理不好。一方面容易发脾气，另一方面说话时带情绪，让对方感到不舒服。</p><p>我们应该好好理解自己的情绪和别人的情绪。第一，我们只有正确理解了人性，才会感到幸福。第二，只有在情绪管理方面做好，我们的人际关系才和谐。第三，只有在情绪管理上面做好，才可以使自己能力提升，具备领导和管理团队的能力，也才可以有正确决策的能力。</p><p>情绪是一个长期的自我斗争的过程。三年前，我就开始接触心理学和人际交往相关课程了，但是，前几周我还因为情绪管理不好和领导争吵，差一点导致严重的后果。这件事也使我深深感觉到情绪管理的不易。</p><p>从心理学理论我们了解到，情绪是快于理智的。当我们感觉到威胁、不安等情境时，杏仁体会迅速发生作用，劫持我们的大脑，导致愤怒情绪的发生，于是下面就容易发生不愉快的事情。很多时候我们其实知道情绪是不对的，我们也许事后会后悔，但是，想在杏仁体发生作用前夺取大脑的控制权很难！</p><p>所以，我期望和大家一起进入情绪管理阶段的学习。如果我们不断和杏仁体劫持做斗争，相信终有一天我们在这方面会做得很好。</p><p>司马迁说过一句话：“夫勇者,卒然临之而不惊,无故加之而不怒.泰山崩于前而色不变,麋鹿行于左而目不瞬”。说的是做大事的人都有良好的情绪控制能力，遇到大事前，不会慌慌张张，不会被情绪左右自己，而是会冷静地处理。</p><h4 id="曾国藩是一个好榜样"><a href="#曾国藩是一个好榜样" class="headerlink" title="曾国藩是一个好榜样"></a>曾国藩是一个好榜样</h4><p>没有人一开始就可以做得很好。这几年，我们听到很多人都推崇一个人：曾国藩。他最大的成就就是在清朝对太平军束手无策的情况下，领导湘军屡败屡战，最终帮助清朝将太平天国镇压下去，官至极品。可是，曾国藩并不是一开始就是一个有大才的人。30岁之前，曾国藩其实是一个很平凡的人。他在自己的日记里面写道，他爱玩，喜欢炫耀学问，脾气大，还好色。并且多次在日记中痛斥自己的不当行为。即使曾国藩对自己要求很严格，他的朋友在他年轻的时候也从来没有觉得他有什么了不起，他的另一个同事胡林翼根本就看不起他，不想跟他来往。</p><p>创办湘军后，曾国藩也没有一开始就能做好。他曾经因为打败仗而要跳水自杀；曾经因为皇帝不重用而一气之下自己跑回老家丢下湘军不理了。</p><p>但是，曾国藩有一个很大的优点，他懂得反思，懂得改变。他每次受挫后一开始尽管也心情低落，但他总能吸取教训，并改正错误。一次一次碰壁后，他的情绪控制能力越来越好，脾气也越来越小了。有一句话叫做“宰相肚里能撑船”，后期的曾国藩也真的做到了。曾国藩有一个同事叫做左宗棠，这个人非常有才，但是脾气暴躁，而且也经常轻视曾国藩，认为曾国藩没有他厉害。他因为和曾国藩有过一些摩擦而毕生不太尊重曾国藩，经常在别的官员面前说他的坏话。然而曾国藩从来不放在心上。后来左宗棠要去打仗，缺粮食，曾国藩想都没想就给左筹到了，完全没有因为左宗棠的行为而在这件事上有所怠慢。在这件事可以看出，左宗棠在为人处世上不如曾国藩。</p><p>曾国藩的故事告诉我们，没有人一生下来就是圣人。无论多么优秀的人，都是在不断努力不断吸取教训之中走过来的，我们没有理由因为自己做得不够好而责怪自己。只要我们不断地改正自己的不良行为，总有一天也会像曾国藩一样成为大家尊重的人。</p><h3 id="承诺"><a href="#承诺" class="headerlink" title="承诺"></a>承诺</h3><p>最后我说说我对承诺的理解。</p><p>承诺是这周我们个人敏捷活动的主题。承诺的关键是我们要讨论如果我们对其他人做过某些承诺，我们做事情往往会更有责任心，做得更好。</p><p>我非常认可这个观点。我个人的经验也印证了这个观点。生活中，我是一个比较懒散的人，比较随意，宿舍往往乱得一塌糊涂。可是一旦答应了别人什么事情，从来不敢怠慢，主要是怕别人看不起自己，怕成为别人眼里那种不靠谱的人。</p><p>从这一点上看，其实我们可以利用人类的这个特点，请朋友监督自己。</p><p>如果我们想养成某一个好习惯，光靠自己努力往往事倍功半。因为我们对自己总是自律力不强的。但是如果我们承诺了朋友什么事情，效果往往会好很多。所以，我们为了向朋友有好的交代，一定会更加认真地做。上一次，我因为发脾气非常后悔，又怕自己以后轻易再犯，于是请一个朋友监督，承诺如果我以后又轻易发脾气，就请他吃三次饭。果然直到现在，我都做得挺好。</p><p><strong>重承诺，不要成为别人眼里不靠谱的人</strong></p><p>长辈总是教导我们，要讲信用。这句话是很有道理的。如果我们总是辜负别人的期望，别人还有什么理由相信我们呢？这样我们还能做什么大事呢？生活中我们眼里那些不成器的人往往就是这样形成的。</p><p>我今周的作业就讲到这里，希望能跟大家继续学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一阶段总结&quot;&gt;&lt;a href=&quot;#第一阶段总结&quot; class=&quot;headerlink&quot; title=&quot;第一阶段总结&quot;&gt;&lt;/a&gt;第一阶段总结&lt;/h3&gt;&lt;p&gt;其实，我对我们个人敏捷的关注度不是很高。最近我忙于技术进修，对于个人敏捷的活动并不是非常关注，只是在交作业的
      
    
    </summary>
    
      <category term="个人敏捷" scheme="https://lqq-smile.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%95%8F%E6%8D%B7/"/>
    
    
      <category term="承诺" scheme="https://lqq-smile.github.io/tags/%E6%89%BF%E8%AF%BA/"/>
    
  </entry>
  
  <entry>
    <title>PCA数学原理理解</title>
    <link href="https://lqq-smile.github.io/2018/06/10/PCA%E6%95%B0%E5%AD%A6%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/"/>
    <id>https://lqq-smile.github.io/2018/06/10/PCA数学原理理解/</id>
    <published>2018-06-10T02:31:40.000Z</published>
    <updated>2018-06-10T03:32:03.200Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论对PCA数学原理的理解。</p><p>原文中最难理解的是：</p><ol><li>协方差矩阵的特征向量为什么是原始数据的降维方向？</li><li>协方差矩阵为什么可以并且要对角化？</li></ol><p>这两个问题其实是一个问题。</p><p>我们知道，协方差矩阵是一个对称矩阵，即：</p><script type="math/tex; mode=display">CC^T=C^TC</script><p>线性代数中，任何一个实对称矩阵，都有这样的特征：</p><blockquote><ol><li><p>它的特征向量一定正交。</p></li><li><p>特征向量单位化后组成的矩阵一定可以将原对称矩阵对角化。即：</p><script type="math/tex; mode=display">E^T C E=\Lambda</script></li></ol></blockquote><p>请理解我们要解决的根本问题：我们的目标是求得一个矩阵P，使Y=PX，最终结果是Y尽可能保留原数据的特征。那么，在数学上说，是不是我们要求得一个矩阵P，使得变换后的数据矩阵Y的协方差矩阵D不同维度的协方差为0？只要不同维度的协方差为0，那么不同的维度是不是相互独立，互不影响了呢？这样一来，重复的维度又不大重要的维度都被去掉了！</p><p>那么，上面的协方差为0，不就是一个对角矩阵$\Lambda$嘛！对角矩阵除了了对角线的元素之外，其他元素都是0. 正好满足了我们要求的目标。</p><p>上面我们知道，原始数据X虽然不对称，但它的协方差矩阵C是对称的，设C的特征向量矩阵为E，于是：</p><script type="math/tex; mode=display">E^TCE=\Lambda</script><p>我们还需要推导另一个关系,设D为Y的协方差矩阵，有：</p><script type="math/tex; mode=display">D={1 \over m}YY^T={1 \over m}(PX)(PX)^T={1 \over m}PXX^TP^T=P({1 \over m}XX^T)P^T=PCP^T</script><p>我们的目标是令D成为一个对角矩阵。于是：</p><script type="math/tex; mode=display">D=\Lambda=PCP^T=E^TCE</script><p>$E^T$就是我们最终要求的结果。即：$P=E^T$。</p><p>所以：</p><script type="math/tex; mode=display">Y=PX=E^TX</script><p>我们知道，X是已知的，于是我们可以求得对应的协方差矩阵C，通过C可以求特征向量矩阵$E^T$，从而求得对应的对角矩阵$\Lambda$。而事实上，$\Lambda$就是特征向量矩阵对应的对角为特征值的对角矩阵。我们按照特征值大小排序就是可以去掉特征值特别小的特征向量了。所以P是我们去掉一些特征后的最终结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文讨论对PCA数学原理的理解。&lt;/p&gt;
&lt;p&gt;原文中最难理解的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协方差矩阵的特征向量为什么是原始数据的降维方向？&lt;/li&gt;
&lt;li&gt;协方差矩阵为什么可以并且要对角化？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个问题其实是一个问题。&lt;/p&gt;
&lt;p&gt;我们
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lqq-smile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="PCA" scheme="https://lqq-smile.github.io/tags/PCA/"/>
    
  </entry>
  
</feed>
